/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/_app";
exports.ids = ["pages/_app"];
exports.modules = {

/***/ "./styles/components/elements/Cursor.module.css":
/*!******************************************************!*\
  !*** ./styles/components/elements/Cursor.module.css ***!
  \******************************************************/
/***/ ((module) => {

eval("// Exports\nmodule.exports = {\n\t\"cursorFollower\": \"Cursor_cursorFollower__83vyu\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMvY29tcG9uZW50cy9lbGVtZW50cy9DdXJzb3IubW9kdWxlLmNzcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FkZW9kdWJhaS8uL3N0eWxlcy9jb21wb25lbnRzL2VsZW1lbnRzL0N1cnNvci5tb2R1bGUuY3NzP2VhOTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdFwiY3Vyc29yRm9sbG93ZXJcIjogXCJDdXJzb3JfY3Vyc29yRm9sbG93ZXJfXzgzdnl1XCJcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./styles/components/elements/Cursor.module.css\n");

/***/ }),

/***/ "./components/elements/Cursor.js":
/*!***************************************!*\
  !*** ./components/elements/Cursor.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ \"./node_modules/gsap/dist/gsap.js\");\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(gsap__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _styles_components_elements_Cursor_module_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../styles/components/elements/Cursor.module.css */ \"./styles/components/elements/Cursor.module.css\");\n/* harmony import */ var _styles_components_elements_Cursor_module_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_styles_components_elements_Cursor_module_css__WEBPACK_IMPORTED_MODULE_3__);\n\n\nconst { useRef , useState , useEffect  } = (react__WEBPACK_IMPORTED_MODULE_1___default());\n// Dependencies\n\n// Stylesheets\n\nconst Cursor = ()=>{\n    const follower = useRef(null);\n    useEffect(()=>{\n        let posX = 0, posY = 0;\n        let mouseX = 0, mouseY = 0;\n        gsap__WEBPACK_IMPORTED_MODULE_2__.gsap.to(follower.current, {\n            duration: 0.018,\n            repeat: -1,\n            ease: gsap__WEBPACK_IMPORTED_MODULE_2__.Power4.easeInOut,\n            onRepeat: function() {\n                posX += (mouseX - posX) / 8;\n                posY += (mouseY - posY) / 8;\n                gsap__WEBPACK_IMPORTED_MODULE_2__.gsap.set(follower.current, {\n                    css: {\n                        left: posX - 1,\n                        top: posY - 2\n                    }\n                });\n            }\n        });\n        document.addEventListener(\"mousemove\", (e)=>{\n            mouseX = e.clientX;\n            mouseY = e.clientY;\n        });\n        let cursor = document.querySelector(\".AdeoCursor\");\n        let cursorScale = document.querySelectorAll(\".orange-scale, .btn-scale, .href-scale\");\n        cursorScale.forEach((link)=>{\n            link.addEventListener(\"mousemove\", ()=>{\n                if (link.classList.contains(\"orange-scale\")) {\n                    cursor.classList.add(\"blend-cursor\");\n                }\n                if (link.classList.contains(\"btn-scale\")) {\n                    cursor.classList.add(\"btn-cursor\");\n                    cursor.classList.add(\"blend-cursor\");\n                }\n                if (link.classList.contains(\"href-scale\")) {\n                    cursor.classList.add(\"grow-cursor\");\n                    cursor.classList.add(\"blend-cursor\");\n                }\n            });\n            link.addEventListener(\"mouseleave\", ()=>{\n                cursor.classList.remove(\"btn-cursor\");\n                cursor.classList.remove(\"blend-cursor\");\n                cursor.classList.remove(\"grow-cursor\");\n            });\n        });\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: `AdeoCursor hidden md:inline ${(_styles_components_elements_Cursor_module_css__WEBPACK_IMPORTED_MODULE_3___default().cursorFollower)}`,\n        ref: follower\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\uraza\\\\Downloads\\\\ADEOGROUP.AE\\\\ADEOGROUP.AE\\\\components\\\\elements\\\\Cursor.js\",\n        lineNumber: 71,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Cursor);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2VsZW1lbnRzL0N1cnNvci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUEwQjtBQUMxQixNQUFNLEVBQUVDLE1BQU0sR0FBRUMsUUFBUSxHQUFFQyxTQUFTLEdBQUUsR0FBR0gsOENBQUs7QUFFN0MsZUFBZTtBQUNxQjtBQUVwQyxjQUFjO0FBQzBEO0FBRXhFLE1BQU1PLE1BQU0sR0FBRyxJQUFNO0lBQ25CLE1BQU1DLFFBQVEsR0FBR1AsTUFBTSxDQUFDLElBQUksQ0FBQztJQUU3QkUsU0FBUyxDQUFDLElBQU07UUFDZCxJQUFJTSxJQUFJLEdBQUcsQ0FBQyxFQUNWQyxJQUFJLEdBQUcsQ0FBQztRQUVWLElBQUlDLE1BQU0sR0FBRyxDQUFDLEVBQ1pDLE1BQU0sR0FBRyxDQUFDO1FBRVpSLHlDQUFPLENBQUNJLFFBQVEsQ0FBQ00sT0FBTyxFQUFFO1lBQ3hCQyxRQUFRLEVBQUUsS0FBSztZQUNmQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQ1ZDLElBQUksRUFBRVosa0RBQWdCO1lBQ3RCYyxRQUFRLEVBQUUsV0FBWTtnQkFDcEJWLElBQUksSUFBSSxDQUFDRSxNQUFNLEdBQUdGLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDNUJDLElBQUksSUFBSSxDQUFDRSxNQUFNLEdBQUdGLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFFNUJOLDBDQUFRLENBQUNJLFFBQVEsQ0FBQ00sT0FBTyxFQUFFO29CQUN6Qk8sR0FBRyxFQUFFO3dCQUNIQyxJQUFJLEVBQUViLElBQUksR0FBRyxDQUFDO3dCQUNkYyxHQUFHLEVBQUViLElBQUksR0FBRyxDQUFDO3FCQUNkO2lCQUNGLENBQUMsQ0FBQztZQUNMLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSGMsUUFBUSxDQUFDQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQ0MsQ0FBQyxHQUFLO1lBQzVDZixNQUFNLEdBQUdlLENBQUMsQ0FBQ0MsT0FBTyxDQUFDO1lBQ25CZixNQUFNLEdBQUdjLENBQUMsQ0FBQ0UsT0FBTyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSUMsTUFBTSxHQUFHTCxRQUFRLENBQUNNLGFBQWEsQ0FBQyxhQUFhLENBQUM7UUFDbEQsSUFBSUMsV0FBVyxHQUFHUCxRQUFRLENBQUNRLGdCQUFnQixDQUN6Qyx3Q0FBd0MsQ0FDekM7UUFFREQsV0FBVyxDQUFDRSxPQUFPLENBQUMsQ0FBQ0MsSUFBSSxHQUFLO1lBQzVCQSxJQUFJLENBQUNULGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFNO2dCQUN2QyxJQUFJUyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFO29CQUMzQ1AsTUFBTSxDQUFDTSxTQUFTLENBQUNFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDdkMsQ0FBQztnQkFDRCxJQUFJSCxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO29CQUN4Q1AsTUFBTSxDQUFDTSxTQUFTLENBQUNFLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztvQkFDbkNSLE1BQU0sQ0FBQ00sU0FBUyxDQUFDRSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ3ZDLENBQUM7Z0JBQ0QsSUFBSUgsSUFBSSxDQUFDQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRTtvQkFDekNQLE1BQU0sQ0FBQ00sU0FBUyxDQUFDRSxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQ3BDUixNQUFNLENBQUNNLFNBQVMsQ0FBQ0UsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUN2QyxDQUFDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFFSEgsSUFBSSxDQUFDVCxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBTTtnQkFDeENJLE1BQU0sQ0FBQ00sU0FBUyxDQUFDRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ3RDVCxNQUFNLENBQUNNLFNBQVMsQ0FBQ0csTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUN4Q1QsTUFBTSxDQUFDTSxTQUFTLENBQUNHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAscUJBQ0UsOERBQUNDLEtBQUc7UUFDRkMsU0FBUyxFQUFFLENBQUMsNEJBQTRCLEVBQUVsQyxxR0FBcUIsQ0FBQyxDQUFDO1FBQ2pFb0MsR0FBRyxFQUFFbEMsUUFBUTs7Ozs7aUJBQ1IsQ0FDUDtBQUNKLENBQUM7QUFFRCxpRUFBZUQsTUFBTSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWRlb2R1YmFpLy4vY29tcG9uZW50cy9lbGVtZW50cy9DdXJzb3IuanM/OGE1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5jb25zdCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9ID0gUmVhY3Q7XG5cbi8vIERlcGVuZGVuY2llc1xuaW1wb3J0IHsgZ3NhcCwgUG93ZXI0IH0gZnJvbSBcImdzYXBcIjtcblxuLy8gU3R5bGVzaGVldHNcbmltcG9ydCBTdHlsZXMgZnJvbSBcIi4uLy4uL3N0eWxlcy9jb21wb25lbnRzL2VsZW1lbnRzL0N1cnNvci5tb2R1bGUuY3NzXCI7XG5cbmNvbnN0IEN1cnNvciA9ICgpID0+IHtcbiAgY29uc3QgZm9sbG93ZXIgPSB1c2VSZWYobnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgcG9zWCA9IDAsXG4gICAgICBwb3NZID0gMDtcblxuICAgIGxldCBtb3VzZVggPSAwLFxuICAgICAgbW91c2VZID0gMDtcblxuICAgIGdzYXAudG8oZm9sbG93ZXIuY3VycmVudCwge1xuICAgICAgZHVyYXRpb246IDAuMDE4LFxuICAgICAgcmVwZWF0OiAtMSxcbiAgICAgIGVhc2U6IFBvd2VyNC5lYXNlSW5PdXQsXG4gICAgICBvblJlcGVhdDogZnVuY3Rpb24gKCkge1xuICAgICAgICBwb3NYICs9IChtb3VzZVggLSBwb3NYKSAvIDg7XG4gICAgICAgIHBvc1kgKz0gKG1vdXNlWSAtIHBvc1kpIC8gODtcblxuICAgICAgICBnc2FwLnNldChmb2xsb3dlci5jdXJyZW50LCB7XG4gICAgICAgICAgY3NzOiB7XG4gICAgICAgICAgICBsZWZ0OiBwb3NYIC0gMSxcbiAgICAgICAgICAgIHRvcDogcG9zWSAtIDIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCAoZSkgPT4ge1xuICAgICAgbW91c2VYID0gZS5jbGllbnRYO1xuICAgICAgbW91c2VZID0gZS5jbGllbnRZO1xuICAgIH0pO1xuXG4gICAgbGV0IGN1cnNvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuQWRlb0N1cnNvclwiKTtcbiAgICBsZXQgY3Vyc29yU2NhbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgXCIub3JhbmdlLXNjYWxlLCAuYnRuLXNjYWxlLCAuaHJlZi1zY2FsZVwiXG4gICAgKTtcblxuICAgIGN1cnNvclNjYWxlLmZvckVhY2goKGxpbmspID0+IHtcbiAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCAoKSA9PiB7XG4gICAgICAgIGlmIChsaW5rLmNsYXNzTGlzdC5jb250YWlucyhcIm9yYW5nZS1zY2FsZVwiKSkge1xuICAgICAgICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKFwiYmxlbmQtY3Vyc29yXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW5rLmNsYXNzTGlzdC5jb250YWlucyhcImJ0bi1zY2FsZVwiKSkge1xuICAgICAgICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKFwiYnRuLWN1cnNvclwiKTtcbiAgICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LmFkZChcImJsZW5kLWN1cnNvclwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGluay5jbGFzc0xpc3QuY29udGFpbnMoXCJocmVmLXNjYWxlXCIpKSB7XG4gICAgICAgICAgY3Vyc29yLmNsYXNzTGlzdC5hZGQoXCJncm93LWN1cnNvclwiKTtcbiAgICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LmFkZChcImJsZW5kLWN1cnNvclwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgKCkgPT4ge1xuICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZShcImJ0bi1jdXJzb3JcIik7XG4gICAgICAgIGN1cnNvci5jbGFzc0xpc3QucmVtb3ZlKFwiYmxlbmQtY3Vyc29yXCIpO1xuICAgICAgICBjdXJzb3IuY2xhc3NMaXN0LnJlbW92ZShcImdyb3ctY3Vyc29yXCIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17YEFkZW9DdXJzb3IgaGlkZGVuIG1kOmlubGluZSAke1N0eWxlcy5jdXJzb3JGb2xsb3dlcn1gfVxuICAgICAgcmVmPXtmb2xsb3dlcn1cbiAgICA+PC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDdXJzb3I7XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImdzYXAiLCJQb3dlcjQiLCJTdHlsZXMiLCJDdXJzb3IiLCJmb2xsb3dlciIsInBvc1giLCJwb3NZIiwibW91c2VYIiwibW91c2VZIiwidG8iLCJjdXJyZW50IiwiZHVyYXRpb24iLCJyZXBlYXQiLCJlYXNlIiwiZWFzZUluT3V0Iiwib25SZXBlYXQiLCJzZXQiLCJjc3MiLCJsZWZ0IiwidG9wIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImNsaWVudFgiLCJjbGllbnRZIiwiY3Vyc29yIiwicXVlcnlTZWxlY3RvciIsImN1cnNvclNjYWxlIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJsaW5rIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJhZGQiLCJyZW1vdmUiLCJkaXYiLCJjbGFzc05hbWUiLCJjdXJzb3JGb2xsb3dlciIsInJlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/elements/Cursor.js\n");

/***/ }),

/***/ "./lib/Context.js":
/*!************************!*\
  !*** ./lib/Context.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst Context = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Context);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvQ29udGV4dC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0M7QUFFdEMsTUFBTUMsT0FBTyxpQkFBR0Qsb0RBQWEsRUFBRTtBQUUvQixpRUFBZUMsT0FBTyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWRlb2R1YmFpLy4vbGliL0NvbnRleHQuanM/ZjA3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuXG5leHBvcnQgZGVmYXVsdCBDb250ZXh0OyJdLCJuYW1lcyI6WyJjcmVhdGVDb250ZXh0IiwiQ29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/Context.js\n");

/***/ }),

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../styles/globals.css */ \"./styles/globals.css\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_Context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/Context */ \"./lib/Context.js\");\n/* harmony import */ var _components_elements_Cursor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/elements/Cursor */ \"./components/elements/Cursor.js\");\n\n\n\nconst { useState  } = (react__WEBPACK_IMPORTED_MODULE_2___default());\n// Context API\n\n// Components\n\nfunction MyApp({ Component , pageProps  }) {\n    // Context API States\n    const [activeIndex, setActiveIndex] = useState(1);\n    const [runAnimation, setRunAnimation] = useState(false);\n    const [isOpen, setOpen] = useState(false);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_lib_Context__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Provider, {\n        value: {\n            index: [\n                activeIndex,\n                setActiveIndex\n            ],\n            animation: [\n                runAnimation,\n                setRunAnimation\n            ],\n            videModal: [\n                isOpen,\n                setOpen\n            ]\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_elements_Cursor__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}, void 0, false, {\n                fileName: \"C:\\\\Users\\\\uraza\\\\Downloads\\\\ADEOGROUP.AE\\\\ADEOGROUP.AE\\\\pages\\\\_app.js\",\n                lineNumber: 25,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                ...pageProps\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\uraza\\\\Downloads\\\\ADEOGROUP.AE\\\\ADEOGROUP.AE\\\\pages\\\\_app.js\",\n                lineNumber: 26,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\uraza\\\\Downloads\\\\ADEOGROUP.AE\\\\ADEOGROUP.AE\\\\pages\\\\_app.js\",\n        lineNumber: 20,\n        columnNumber: 5\n    }, this);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MyApp);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQThCO0FBRUw7QUFDekIsTUFBTSxFQUFFQyxRQUFRLEdBQUUsR0FBR0QsOENBQUs7QUFFMUIsY0FBYztBQUN1QjtBQUVyQyxhQUFhO0FBQ3FDO0FBRWxELFNBQVNJLEtBQUssQ0FBQyxFQUFFQyxTQUFTLEdBQUVDLFNBQVMsR0FBRSxFQUFFO0lBRXZDLHFCQUFxQjtJQUNyQixNQUFNLENBQUNDLFdBQVcsRUFBRUMsY0FBYyxDQUFDLEdBQUdQLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDakQsTUFBTSxDQUFDUSxZQUFZLEVBQUVDLGVBQWUsQ0FBQyxHQUFHVCxRQUFRLENBQUMsS0FBSyxDQUFDO0lBQ3ZELE1BQU0sQ0FBQ1UsTUFBTSxFQUFFQyxPQUFPLENBQUMsR0FBR1gsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUV6QyxxQkFDRSw4REFBQ0MsNkRBQWdCO1FBQUNZLEtBQUssRUFBRTtZQUN2QkMsS0FBSyxFQUFHO2dCQUFDUixXQUFXO2dCQUFFQyxjQUFjO2FBQUM7WUFDckNRLFNBQVMsRUFBRTtnQkFBQ1AsWUFBWTtnQkFBRUMsZUFBZTthQUFDO1lBQzFDTyxTQUFTLEVBQUU7Z0JBQUNOLE1BQU07Z0JBQUVDLE9BQU87YUFBQztTQUM3Qjs7MEJBQ0MsOERBQUNULG1FQUFNOzs7O29CQUFHOzBCQUNWLDhEQUFDRSxTQUFTO2dCQUFFLEdBQUdDLFNBQVM7Ozs7O29CQUFJOzs7Ozs7WUFDWCxDQUNwQjtBQUVILENBQUM7QUFFRCxpRUFBZUYsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL2FkZW9kdWJhaS8uL3BhZ2VzL19hcHAuanM/ZTBhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uL3N0eWxlcy9nbG9iYWxzLmNzcydcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuY29uc3QgeyB1c2VTdGF0ZSB9ID0gUmVhY3Q7XG5cbi8vIENvbnRleHQgQVBJXG5pbXBvcnQgQ29udGV4dCBmcm9tICcuLi9saWIvQ29udGV4dCc7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCBDdXJzb3IgZnJvbSAnLi4vY29tcG9uZW50cy9lbGVtZW50cy9DdXJzb3InXG5cbmZ1bmN0aW9uIE15QXBwKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfSkge1xuXG4gIC8vIENvbnRleHQgQVBJIFN0YXRlc1xuICBjb25zdCBbYWN0aXZlSW5kZXgsIHNldEFjdGl2ZUluZGV4XSA9IHVzZVN0YXRlKDEpO1xuICBjb25zdCBbcnVuQW5pbWF0aW9uLCBzZXRSdW5BbmltYXRpb25dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbaXNPcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuXG4gIHJldHVybiAoXG4gICAgPENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3tcbiAgICAgIGluZGV4IDogW2FjdGl2ZUluZGV4LCBzZXRBY3RpdmVJbmRleF0sXG4gICAgICBhbmltYXRpb246IFtydW5BbmltYXRpb24sIHNldFJ1bkFuaW1hdGlvbl0sXG4gICAgICB2aWRlTW9kYWw6IFtpc09wZW4sIHNldE9wZW5dXG4gICAgfX0+XG4gICAgICA8Q3Vyc29yIC8+XG4gICAgICA8Q29tcG9uZW50IHsuLi5wYWdlUHJvcHN9IC8+XG4gICAgPC9Db250ZXh0LlByb3ZpZGVyPlxuICApXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTXlBcHBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwiQ29udGV4dCIsIkN1cnNvciIsIk15QXBwIiwiQ29tcG9uZW50IiwicGFnZVByb3BzIiwiYWN0aXZlSW5kZXgiLCJzZXRBY3RpdmVJbmRleCIsInJ1bkFuaW1hdGlvbiIsInNldFJ1bkFuaW1hdGlvbiIsImlzT3BlbiIsInNldE9wZW4iLCJQcm92aWRlciIsInZhbHVlIiwiaW5kZXgiLCJhbmltYXRpb24iLCJ2aWRlTW9kYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/_app.js\n");

/***/ }),

/***/ "./node_modules/gsap/dist/gsap.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/dist/gsap.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n(function(global, factory) {\n     true ? factory(exports) : 0;\n})(void 0, function(exports1) {\n    \"use strict\";\n    function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n        subClass.__proto__ = superClass;\n    }\n    function _assertThisInitialized(self1) {\n        if (self1 === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n        return self1;\n    }\n    /*!\n   * GSAP 3.11.1\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2022, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */ var _config = {\n        autoSleep: 120,\n        force3D: \"auto\",\n        nullTargetWarn: 1,\n        units: {\n            lineHeight: \"\"\n        }\n    }, _defaults = {\n        duration: .5,\n        overwrite: false,\n        delay: 0\n    }, _suppressOverwrites, _reverting, _context, _bigNum = 1e8, _tinyNum = 1 / _bigNum, _2PI = Math.PI * 2, _HALF_PI = _2PI / 4, _gsID = 0, _sqrt = Math.sqrt, _cos = Math.cos, _sin = Math.sin, _isString = function _isString(value) {\n        return typeof value === \"string\";\n    }, _isFunction = function _isFunction(value) {\n        return typeof value === \"function\";\n    }, _isNumber = function _isNumber(value) {\n        return typeof value === \"number\";\n    }, _isUndefined = function _isUndefined(value) {\n        return typeof value === \"undefined\";\n    }, _isObject = function _isObject(value) {\n        return typeof value === \"object\";\n    }, _isNotFalse = function _isNotFalse(value) {\n        return value !== false;\n    }, _windowExists = function _windowExists() {\n        return \"undefined\" !== \"undefined\";\n    }, _isFuncOrString = function _isFuncOrString(value) {\n        return _isFunction(value) || _isString(value);\n    }, _isTypedArray = typeof ArrayBuffer === \"function\" && ArrayBuffer.isView || function() {}, _isArray = Array.isArray, _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi, _numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g, _numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g, _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi, _relExp = /[+-]=-?[.\\d]+/, _delimitedValueExp = /[^,'\"\\[\\]\\s]+/gi, _unitExp = /^[+\\-=e\\s\\d]*\\d+[.\\d]*([a-z]*|%)\\s*$/i, _globalTimeline, _win, _coreInitted, _doc, _globals = {}, _installScope = {}, _coreReady, _install = function _install(scope) {\n        return (_installScope = _merge(scope, _globals)) && gsap;\n    }, _missingPlugin = function _missingPlugin(property, value) {\n        return console.warn(\"Invalid property\", property, \"set to\", value, \"Missing plugin? gsap.registerPlugin()\");\n    }, _warn = function _warn(message, suppress) {\n        return !suppress && console.warn(message);\n    }, _addGlobal = function _addGlobal(name, obj) {\n        return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\n    }, _emptyFunc = function _emptyFunc() {\n        return 0;\n    }, _startAtRevertConfig = {\n        suppressEvents: true,\n        isStart: true\n    }, _revertConfig = {\n        suppressEvents: true\n    }, _reservedProps = {}, _lazyTweens = [], _lazyLookup = {}, _lastRenderedFrame, _plugins = {}, _effects = {}, _nextGCFrame = 30, _harnessPlugins = [], _callbackNames = \"\", _harness = function _harness(targets) {\n        var target = targets[0], harnessPlugin, i;\n        _isObject(target) || _isFunction(target) || (targets = [\n            targets\n        ]);\n        if (!(harnessPlugin = (target._gsap || {}).harness)) {\n            i = _harnessPlugins.length;\n            while(i-- && !_harnessPlugins[i].targetTest(target)){}\n            harnessPlugin = _harnessPlugins[i];\n        }\n        i = targets.length;\n        while(i--){\n            targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\n        }\n        return targets;\n    }, _getCache = function _getCache(target) {\n        return target._gsap || _harness(toArray(target))[0]._gsap;\n    }, _getProperty = function _getProperty(target, property, v) {\n        return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\n    }, _forEachName = function _forEachName(names, func) {\n        return (names = names.split(\",\")).forEach(func) || names;\n    }, _round = function _round(value) {\n        return Math.round(value * 100000) / 100000 || 0;\n    }, _roundPrecise = function _roundPrecise(value) {\n        return Math.round(value * 10000000) / 10000000 || 0;\n    }, _parseRelative = function _parseRelative(start, value) {\n        var operator = value.charAt(0), end = parseFloat(value.substr(2));\n        start = parseFloat(start);\n        return operator === \"+\" ? start + end : operator === \"-\" ? start - end : operator === \"*\" ? start * end : start / end;\n    }, _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\n        var l = toFind.length, i = 0;\n        for(; toSearch.indexOf(toFind[i]) < 0 && ++i < l;){}\n        return i < l;\n    }, _lazyRender = function _lazyRender() {\n        var l = _lazyTweens.length, a = _lazyTweens.slice(0), i, tween;\n        _lazyLookup = {};\n        _lazyTweens.length = 0;\n        for(i = 0; i < l; i++){\n            tween = a[i];\n            tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\n        }\n    }, _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\n        _lazyTweens.length && _lazyRender();\n        animation.render(time, suppressEvents, force || _reverting);\n        _lazyTweens.length && _lazyRender();\n    }, _numericIfPossible = function _numericIfPossible(value) {\n        var n = parseFloat(value);\n        return (n || n === 0) && (value + \"\").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\n    }, _passThrough = function _passThrough(p) {\n        return p;\n    }, _setDefaults = function _setDefaults(obj, defaults) {\n        for(var p in defaults){\n            p in obj || (obj[p] = defaults[p]);\n        }\n        return obj;\n    }, _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {\n        return function(obj, defaults) {\n            for(var p in defaults){\n                p in obj || p === \"duration\" && excludeDuration || p === \"ease\" || (obj[p] = defaults[p]);\n            }\n        };\n    }, _merge = function _merge(base, toMerge) {\n        for(var p in toMerge){\n            base[p] = toMerge[p];\n        }\n        return base;\n    }, _mergeDeep = function _mergeDeep(base, toMerge) {\n        for(var p in toMerge){\n            p !== \"__proto__\" && p !== \"constructor\" && p !== \"prototype\" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\n        }\n        return base;\n    }, _copyExcluding = function _copyExcluding(obj, excluding) {\n        var copy = {}, p;\n        for(p in obj){\n            p in excluding || (copy[p] = obj[p]);\n        }\n        return copy;\n    }, _inheritDefaults = function _inheritDefaults(vars) {\n        var parent = vars.parent || _globalTimeline, func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;\n        if (_isNotFalse(vars.inherit)) {\n            while(parent){\n                func(vars, parent.vars.defaults);\n                parent = parent.parent || parent._dp;\n            }\n        }\n        return vars;\n    }, _arraysMatch = function _arraysMatch(a1, a2) {\n        var i = a1.length, match = i === a2.length;\n        while(match && i-- && a1[i] === a2[i]){}\n        return i < 0;\n    }, _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\n        if (firstProp === void 0) {\n            firstProp = \"_first\";\n        }\n        if (lastProp === void 0) {\n            lastProp = \"_last\";\n        }\n        var prev = parent[lastProp], t;\n        if (sortBy) {\n            t = child[sortBy];\n            while(prev && prev[sortBy] > t){\n                prev = prev._prev;\n            }\n        }\n        if (prev) {\n            child._next = prev._next;\n            prev._next = child;\n        } else {\n            child._next = parent[firstProp];\n            parent[firstProp] = child;\n        }\n        if (child._next) {\n            child._next._prev = child;\n        } else {\n            parent[lastProp] = child;\n        }\n        child._prev = prev;\n        child.parent = child._dp = parent;\n        return child;\n    }, _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\n        if (firstProp === void 0) {\n            firstProp = \"_first\";\n        }\n        if (lastProp === void 0) {\n            lastProp = \"_last\";\n        }\n        var prev = child._prev, next = child._next;\n        if (prev) {\n            prev._next = next;\n        } else if (parent[firstProp] === child) {\n            parent[firstProp] = next;\n        }\n        if (next) {\n            next._prev = prev;\n        } else if (parent[lastProp] === child) {\n            parent[lastProp] = prev;\n        }\n        child._next = child._prev = child.parent = null;\n    }, _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\n        child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);\n        child._act = 0;\n    }, _uncache = function _uncache(animation, child) {\n        if (animation && (!child || child._end > animation._dur || child._start < 0)) {\n            var a = animation;\n            while(a){\n                a._dirty = 1;\n                a = a.parent;\n            }\n        }\n        return animation;\n    }, _recacheAncestors = function _recacheAncestors(animation) {\n        var parent = animation.parent;\n        while(parent && parent.parent){\n            parent._dirty = 1;\n            parent.totalDuration();\n            parent = parent.parent;\n        }\n        return animation;\n    }, _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {\n        return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfig) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));\n    }, _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\n        return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\n    }, _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\n        return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\n    }, _animationCycle = function _animationCycle(tTime, cycleDuration) {\n        var whole = Math.floor(tTime /= cycleDuration);\n        return tTime && whole === tTime ? whole - 1 : whole;\n    }, _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\n        return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\n    }, _setEnd = function _setEnd(animation) {\n        return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\n    }, _alignPlayhead = function _alignPlayhead(animation, totalTime) {\n        var parent = animation._dp;\n        if (parent && parent.smoothChildTiming && animation._ts) {\n            animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\n            _setEnd(animation);\n            parent._dirty || _uncache(parent, animation);\n        }\n        return animation;\n    }, _postAddChecks = function _postAddChecks(timeline, child) {\n        var t;\n        if (child._time || child._initted && !child._dur) {\n            t = _parentToChildTotalTime(timeline.rawTime(), child);\n            if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\n                child.render(t, true);\n            }\n        }\n        if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\n            if (timeline._dur < timeline.duration()) {\n                t = timeline;\n                while(t._dp){\n                    t.rawTime() >= 0 && t.totalTime(t._tTime);\n                    t = t._dp;\n                }\n            }\n            timeline._zTime = -_tinyNum;\n        }\n    }, _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\n        child.parent && _removeFromParent(child);\n        child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);\n        child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\n        _addLinkedListItem(timeline, child, \"_first\", \"_last\", timeline._sort ? \"_start\" : 0);\n        _isFromOrFromStart(child) || (timeline._recent = child);\n        skipChecks || _postAddChecks(timeline, child);\n        timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime);\n        return timeline;\n    }, _scrollTrigger = function _scrollTrigger(animation, trigger) {\n        return (_globals.ScrollTrigger || _missingPlugin(\"scrollTrigger\", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\n    }, _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {\n        _initTween(tween, totalTime);\n        if (!tween._initted) {\n            return 1;\n        }\n        if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\n            _lazyTweens.push(tween);\n            tween._lazy = [\n                totalTime,\n                suppressEvents\n            ];\n            return 1;\n        }\n    }, _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\n        var parent = _ref.parent;\n        return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\n    }, _isFromOrFromStart = function _isFromOrFromStart(_ref2) {\n        var data = _ref2.data;\n        return data === \"isFromStart\" || data === \"isStart\";\n    }, _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\n        var prevRatio = tween.ratio, ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1, repeatDelay = tween._rDelay, tTime = 0, pt, iteration, prevIteration;\n        if (repeatDelay && tween._repeat) {\n            tTime = _clamp(0, tween._tDur, totalTime);\n            iteration = _animationCycle(tTime, repeatDelay);\n            tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\n            if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {\n                prevRatio = 1 - ratio;\n                tween.vars.repeatRefresh && tween._initted && tween.invalidate();\n            }\n        }\n        if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\n            if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {\n                return;\n            }\n            prevIteration = tween._zTime;\n            tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);\n            suppressEvents || (suppressEvents = totalTime && !prevIteration);\n            tween.ratio = ratio;\n            tween._from && (ratio = 1 - ratio);\n            tween._time = 0;\n            tween._tTime = tTime;\n            pt = tween._pt;\n            while(pt){\n                pt.r(ratio, pt.d);\n                pt = pt._next;\n            }\n            totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);\n            tween._onUpdate && !suppressEvents && _callback(tween, \"onUpdate\");\n            tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, \"onRepeat\");\n            if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\n                ratio && _removeFromParent(tween, 1);\n                if (!suppressEvents && !_reverting) {\n                    _callback(tween, ratio ? \"onComplete\" : \"onReverseComplete\", true);\n                    tween._prom && tween._prom();\n                }\n            }\n        } else if (!tween._zTime) {\n            tween._zTime = totalTime;\n        }\n    }, _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\n        var child;\n        if (time > prevTime) {\n            child = animation._first;\n            while(child && child._start <= time){\n                if (child.data === \"isPause\" && child._start > prevTime) {\n                    return child;\n                }\n                child = child._next;\n            }\n        } else {\n            child = animation._last;\n            while(child && child._start >= time){\n                if (child.data === \"isPause\" && child._start < prevTime) {\n                    return child;\n                }\n                child = child._prev;\n            }\n        }\n    }, _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\n        var repeat = animation._repeat, dur = _roundPrecise(duration) || 0, totalProgress = animation._tTime / animation._tDur;\n        totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\n        animation._dur = dur;\n        animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);\n        totalProgress > 0 && !leavePlayhead ? _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress) : animation.parent && _setEnd(animation);\n        skipUncache || _uncache(animation.parent, animation);\n        return animation;\n    }, _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\n        return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\n    }, _zeroPosition = {\n        _start: 0,\n        endTime: _emptyFunc,\n        totalDuration: _emptyFunc\n    }, _parsePosition = function _parsePosition(animation, position, percentAnimation) {\n        var labels = animation.labels, recent = animation._recent || _zeroPosition, clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur, i, offset, isPercent;\n        if (_isString(position) && (isNaN(position) || position in labels)) {\n            offset = position.charAt(0);\n            isPercent = position.substr(-1) === \"%\";\n            i = position.indexOf(\"=\");\n            if (offset === \"<\" || offset === \">\") {\n                i >= 0 && (position = position.replace(/=/, \"\"));\n                return (offset === \"<\" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);\n            }\n            if (i < 0) {\n                position in labels || (labels[position] = clippedDuration);\n                return labels[position];\n            }\n            offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));\n            if (isPercent && percentAnimation) {\n                offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();\n            }\n            return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;\n        }\n        return position == null ? clippedDuration : +position;\n    }, _createTweenType = function _createTweenType(type, params, timeline) {\n        var isLegacy = _isNumber(params[1]), varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1), vars = params[varsIndex], irVars, parent;\n        isLegacy && (vars.duration = params[1]);\n        vars.parent = timeline;\n        if (type) {\n            irVars = vars;\n            parent = timeline;\n            while(parent && !(\"immediateRender\" in irVars)){\n                irVars = parent.vars.defaults || {};\n                parent = _isNotFalse(parent.vars.inherit) && parent.parent;\n            }\n            vars.immediateRender = _isNotFalse(irVars.immediateRender);\n            type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];\n        }\n        return new Tween(params[0], vars, params[varsIndex + 1]);\n    }, _conditionalReturn = function _conditionalReturn(value, func) {\n        return value || value === 0 ? func(value) : func;\n    }, _clamp = function _clamp(min, max, value) {\n        return value < min ? min : value > max ? max : value;\n    }, getUnit = function getUnit(value, v) {\n        return !_isString(value) || !(v = _unitExp.exec(value)) ? \"\" : v[1];\n    }, clamp = function clamp(min, max, value) {\n        return _conditionalReturn(value, function(v) {\n            return _clamp(min, max, v);\n        });\n    }, _slice = [].slice, _isArrayLike = function _isArrayLike(value, nonEmpty) {\n        return value && _isObject(value) && \"length\" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\n    }, _flatten = function _flatten(ar, leaveStrings, accumulator) {\n        if (accumulator === void 0) {\n            accumulator = [];\n        }\n        return ar.forEach(function(value) {\n            var _accumulator;\n            return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\n        }) || accumulator;\n    }, toArray = function toArray(value, scope, leaveStrings) {\n        return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [\n            value\n        ] : [];\n    }, selector = function selector(value) {\n        value = toArray(value)[0] || _warn(\"Invalid scope\") || {};\n        return function(v) {\n            var el = value.current || value.nativeElement || value;\n            return toArray(v, el.querySelectorAll ? el : el === value ? _warn(\"Invalid scope\") || _doc.createElement(\"div\") : value);\n        };\n    }, shuffle = function shuffle(a) {\n        return a.sort(function() {\n            return .5 - Math.random();\n        });\n    }, distribute = function distribute(v) {\n        if (_isFunction(v)) {\n            return v;\n        }\n        var vars = _isObject(v) ? v : {\n            each: v\n        }, ease = _parseEase(vars.ease), from = vars.from || 0, base = parseFloat(vars.base) || 0, cache = {}, isDecimal = from > 0 && from < 1, ratios = isNaN(from) || isDecimal, axis = vars.axis, ratioX = from, ratioY = from;\n        if (_isString(from)) {\n            ratioX = ratioY = ({\n                center: .5,\n                edges: .5,\n                end: 1\n            })[from] || 0;\n        } else if (!isDecimal && ratios) {\n            ratioX = from[0];\n            ratioY = from[1];\n        }\n        return function(i, target, a) {\n            var l = (a || vars).length, distances = cache[l], originX, originY, x, y, d, j, max, min, wrapAt;\n            if (!distances) {\n                wrapAt = vars.grid === \"auto\" ? 0 : (vars.grid || [\n                    1,\n                    _bigNum\n                ])[1];\n                if (!wrapAt) {\n                    max = -_bigNum;\n                    while(max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l){}\n                    wrapAt--;\n                }\n                distances = cache[l] = [];\n                originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\n                originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\n                max = 0;\n                min = _bigNum;\n                for(j = 0; j < l; j++){\n                    x = j % wrapAt - originX;\n                    y = originY - (j / wrapAt | 0);\n                    distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === \"y\" ? y : x);\n                    d > max && (max = d);\n                    d < min && (min = d);\n                }\n                from === \"random\" && shuffle(distances);\n                distances.max = max - min;\n                distances.min = min;\n                distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === \"y\" ? l / wrapAt : wrapAt) || 0) * (from === \"edges\" ? -1 : 1);\n                distances.b = l < 0 ? base - l : base;\n                distances.u = getUnit(vars.amount || vars.each) || 0;\n                ease = ease && l < 0 ? _invertEase(ease) : ease;\n            }\n            l = (distances[i] - distances.min) / distances.max || 0;\n            return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;\n        };\n    }, _roundModifier = function _roundModifier(v) {\n        var p = Math.pow(10, ((v + \"\").split(\".\")[1] || \"\").length);\n        return function(raw) {\n            var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);\n            return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw));\n        };\n    }, snap = function snap(snapTo, value) {\n        var isArray = _isArray(snapTo), radius, is2D;\n        if (!isArray && _isObject(snapTo)) {\n            radius = isArray = snapTo.radius || _bigNum;\n            if (snapTo.values) {\n                snapTo = toArray(snapTo.values);\n                if (is2D = !_isNumber(snapTo[0])) {\n                    radius *= radius;\n                }\n            } else {\n                snapTo = _roundModifier(snapTo.increment);\n            }\n        }\n        return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function(raw) {\n            is2D = snapTo(raw);\n            return Math.abs(is2D - raw) <= radius ? is2D : raw;\n        } : function(raw) {\n            var x = parseFloat(is2D ? raw.x : raw), y = parseFloat(is2D ? raw.y : 0), min = _bigNum, closest = 0, i = snapTo.length, dx, dy;\n            while(i--){\n                if (is2D) {\n                    dx = snapTo[i].x - x;\n                    dy = snapTo[i].y - y;\n                    dx = dx * dx + dy * dy;\n                } else {\n                    dx = Math.abs(snapTo[i] - x);\n                }\n                if (dx < min) {\n                    min = dx;\n                    closest = i;\n                }\n            }\n            closest = !radius || min <= radius ? snapTo[closest] : raw;\n            return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\n        });\n    }, random = function random(min, max, roundingIncrement, returnFunction) {\n        return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function() {\n            return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + \"\").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\n        });\n    }, pipe = function pipe() {\n        for(var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++){\n            functions[_key] = arguments[_key];\n        }\n        return function(value) {\n            return functions.reduce(function(v, f) {\n                return f(v);\n            }, value);\n        };\n    }, unitize = function unitize(func, unit) {\n        return function(value) {\n            return func(parseFloat(value)) + (unit || getUnit(value));\n        };\n    }, normalize = function normalize(min, max, value) {\n        return mapRange(min, max, 0, 1, value);\n    }, _wrapArray = function _wrapArray(a, wrapper, value) {\n        return _conditionalReturn(value, function(index) {\n            return a[~~wrapper(index)];\n        });\n    }, wrap = function wrap(min, max, value) {\n        var range = max - min;\n        return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function(value) {\n            return (range + (value - min) % range) % range + min;\n        });\n    }, wrapYoyo = function wrapYoyo(min, max, value) {\n        var range = max - min, total = range * 2;\n        return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function(value) {\n            value = (total + (value - min) % total) % total || 0;\n            return min + (value > range ? total - value : value);\n        });\n    }, _replaceRandom = function _replaceRandom(value) {\n        var prev = 0, s = \"\", i, nums, end, isArray;\n        while(~(i = value.indexOf(\"random(\", prev))){\n            end = value.indexOf(\")\", i);\n            isArray = value.charAt(i + 7) === \"[\";\n            nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\n            s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\n            prev = end + 1;\n        }\n        return s + value.substr(prev, value.length - prev);\n    }, mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n        var inRange = inMax - inMin, outRange = outMax - outMin;\n        return _conditionalReturn(value, function(value) {\n            return outMin + ((value - inMin) / inRange * outRange || 0);\n        });\n    }, interpolate = function interpolate(start, end, progress, mutate) {\n        var func = isNaN(start + end) ? 0 : function(p) {\n            return (1 - p) * start + p * end;\n        };\n        if (!func) {\n            var isString = _isString(start), master = {}, p, i, interpolators, l, il;\n            progress === true && (mutate = 1) && (progress = null);\n            if (isString) {\n                start = {\n                    p: start\n                };\n                end = {\n                    p: end\n                };\n            } else if (_isArray(start) && !_isArray(end)) {\n                interpolators = [];\n                l = start.length;\n                il = l - 2;\n                for(i = 1; i < l; i++){\n                    interpolators.push(interpolate(start[i - 1], start[i]));\n                }\n                l--;\n                func = function func(p) {\n                    p *= l;\n                    var i = Math.min(il, ~~p);\n                    return interpolators[i](p - i);\n                };\n                progress = end;\n            } else if (!mutate) {\n                start = _merge(_isArray(start) ? [] : {}, start);\n            }\n            if (!interpolators) {\n                for(p in end){\n                    _addPropTween.call(master, start, p, \"get\", end[p]);\n                }\n                func = function func(p) {\n                    return _renderPropTweens(p, master) || (isString ? start.p : start);\n                };\n            }\n        }\n        return _conditionalReturn(progress, func);\n    }, _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\n        var labels = timeline.labels, min = _bigNum, p, distance, label;\n        for(p in labels){\n            distance = labels[p] - fromTime;\n            if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\n                label = p;\n                min = distance;\n            }\n        }\n        return label;\n    }, _callback = function _callback(animation, type, executeLazyFirst) {\n        var v = animation.vars, callback = v[type], prevContext = _context, context = animation._ctx, params, scope, result;\n        if (!callback) {\n            return;\n        }\n        params = v[type + \"Params\"];\n        scope = v.callbackScope || animation;\n        executeLazyFirst && _lazyTweens.length && _lazyRender();\n        context && (_context = context);\n        result = params ? callback.apply(scope, params) : callback.call(scope);\n        _context = prevContext;\n        return result;\n    }, _interrupt = function _interrupt(animation) {\n        _removeFromParent(animation);\n        animation.scrollTrigger && animation.scrollTrigger.kill(false);\n        animation.progress() < 1 && _callback(animation, \"onInterrupt\");\n        return animation;\n    }, _quickTween, _createPlugin = function _createPlugin(config) {\n        config = !config.name && config[\"default\"] || config;\n        var name = config.name, isFunc = _isFunction(config), Plugin = name && !isFunc && config.init ? function() {\n            this._props = [];\n        } : config, instanceDefaults = {\n            init: _emptyFunc,\n            render: _renderPropTweens,\n            add: _addPropTween,\n            kill: _killPropTweensOf,\n            modifier: _addPluginModifier,\n            rawVars: 0\n        }, statics = {\n            targetTest: 0,\n            get: 0,\n            getSetter: _getSetter,\n            aliases: {},\n            register: 0\n        };\n        _wake();\n        if (config !== Plugin) {\n            if (_plugins[name]) {\n                return;\n            }\n            _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));\n            _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));\n            _plugins[Plugin.prop = name] = Plugin;\n            if (config.targetTest) {\n                _harnessPlugins.push(Plugin);\n                _reservedProps[name] = 1;\n            }\n            name = (name === \"css\" ? \"CSS\" : name.charAt(0).toUpperCase() + name.substr(1)) + \"Plugin\";\n        }\n        _addGlobal(name, Plugin);\n        config.register && config.register(gsap, Plugin, PropTween);\n    }, _255 = 255, _colorLookup = {\n        aqua: [\n            0,\n            _255,\n            _255\n        ],\n        lime: [\n            0,\n            _255,\n            0\n        ],\n        silver: [\n            192,\n            192,\n            192\n        ],\n        black: [\n            0,\n            0,\n            0\n        ],\n        maroon: [\n            128,\n            0,\n            0\n        ],\n        teal: [\n            0,\n            128,\n            128\n        ],\n        blue: [\n            0,\n            0,\n            _255\n        ],\n        navy: [\n            0,\n            0,\n            128\n        ],\n        white: [\n            _255,\n            _255,\n            _255\n        ],\n        olive: [\n            128,\n            128,\n            0\n        ],\n        yellow: [\n            _255,\n            _255,\n            0\n        ],\n        orange: [\n            _255,\n            165,\n            0\n        ],\n        gray: [\n            128,\n            128,\n            128\n        ],\n        purple: [\n            128,\n            0,\n            128\n        ],\n        green: [\n            0,\n            128,\n            0\n        ],\n        red: [\n            _255,\n            0,\n            0\n        ],\n        pink: [\n            _255,\n            192,\n            203\n        ],\n        cyan: [\n            0,\n            _255,\n            _255\n        ],\n        transparent: [\n            _255,\n            _255,\n            _255,\n            0\n        ]\n    }, _hue = function _hue(h, m1, m2) {\n        h += h < 0 ? 1 : h > 1 ? -1 : 0;\n        return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\n    }, splitColor = function splitColor(v, toHSL, forceAlpha) {\n        var a = !v ? _colorLookup.black : _isNumber(v) ? [\n            v >> 16,\n            v >> 8 & _255,\n            v & _255\n        ] : 0, r, g, b, h, s, l, max, min, d, wasHSL;\n        if (!a) {\n            if (v.substr(-1) === \",\") {\n                v = v.substr(0, v.length - 1);\n            }\n            if (_colorLookup[v]) {\n                a = _colorLookup[v];\n            } else if (v.charAt(0) === \"#\") {\n                if (v.length < 6) {\n                    r = v.charAt(1);\n                    g = v.charAt(2);\n                    b = v.charAt(3);\n                    v = \"#\" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : \"\");\n                }\n                if (v.length === 9) {\n                    a = parseInt(v.substr(1, 6), 16);\n                    return [\n                        a >> 16,\n                        a >> 8 & _255,\n                        a & _255,\n                        parseInt(v.substr(7), 16) / 255\n                    ];\n                }\n                v = parseInt(v.substr(1), 16);\n                a = [\n                    v >> 16,\n                    v >> 8 & _255,\n                    v & _255\n                ];\n            } else if (v.substr(0, 3) === \"hsl\") {\n                a = wasHSL = v.match(_strictNumExp);\n                if (!toHSL) {\n                    h = +a[0] % 360 / 360;\n                    s = +a[1] / 100;\n                    l = +a[2] / 100;\n                    g = l <= .5 ? l * (s + 1) : l + s - l * s;\n                    r = l * 2 - g;\n                    a.length > 3 && (a[3] *= 1);\n                    a[0] = _hue(h + 1 / 3, r, g);\n                    a[1] = _hue(h, r, g);\n                    a[2] = _hue(h - 1 / 3, r, g);\n                } else if (~v.indexOf(\"=\")) {\n                    a = v.match(_numExp);\n                    forceAlpha && a.length < 4 && (a[3] = 1);\n                    return a;\n                }\n            } else {\n                a = v.match(_strictNumExp) || _colorLookup.transparent;\n            }\n            a = a.map(Number);\n        }\n        if (toHSL && !wasHSL) {\n            r = a[0] / _255;\n            g = a[1] / _255;\n            b = a[2] / _255;\n            max = Math.max(r, g, b);\n            min = Math.min(r, g, b);\n            l = (max + min) / 2;\n            if (max === min) {\n                h = s = 0;\n            } else {\n                d = max - min;\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n                h *= 60;\n            }\n            a[0] = ~~(h + .5);\n            a[1] = ~~(s * 100 + .5);\n            a[2] = ~~(l * 100 + .5);\n        }\n        forceAlpha && a.length < 4 && (a[3] = 1);\n        return a;\n    }, _colorOrderData = function _colorOrderData(v) {\n        var values = [], c = [], i = -1;\n        v.split(_colorExp).forEach(function(v) {\n            var a = v.match(_numWithUnitExp) || [];\n            values.push.apply(values, a);\n            c.push(i += a.length + 1);\n        });\n        values.c = c;\n        return values;\n    }, _formatColors = function _formatColors(s, toHSL, orderMatchData) {\n        var result = \"\", colors = (s + result).match(_colorExp), type = toHSL ? \"hsla(\" : \"rgba(\", i = 0, c, shell, d, l;\n        if (!colors) {\n            return s;\n        }\n        colors = colors.map(function(color) {\n            return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : color.join(\",\")) + \")\";\n        });\n        if (orderMatchData) {\n            d = _colorOrderData(s);\n            c = orderMatchData.c;\n            if (c.join(result) !== d.c.join(result)) {\n                shell = s.replace(_colorExp, \"1\").split(_numWithUnitExp);\n                l = shell.length - 1;\n                for(; i < l; i++){\n                    result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + \"0,0,0,0)\" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\n                }\n            }\n        }\n        if (!shell) {\n            shell = s.split(_colorExp);\n            l = shell.length - 1;\n            for(; i < l; i++){\n                result += shell[i] + colors[i];\n            }\n        }\n        return result + shell[l];\n    }, _colorExp = function() {\n        var s = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b\", p;\n        for(p in _colorLookup){\n            s += \"|\" + p + \"\\\\b\";\n        }\n        return new RegExp(s + \")\", \"gi\");\n    }(), _hslExp = /hsl[a]?\\(/, _colorStringFilter = function _colorStringFilter(a) {\n        var combined = a.join(\" \"), toHSL;\n        _colorExp.lastIndex = 0;\n        if (_colorExp.test(combined)) {\n            toHSL = _hslExp.test(combined);\n            a[1] = _formatColors(a[1], toHSL);\n            a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));\n            return true;\n        }\n    }, _tickerActive, _ticker = function() {\n        var _getTime = Date.now, _lagThreshold = 500, _adjustedLag = 33, _startTime = _getTime(), _lastUpdate = _startTime, _gap = 1000 / 240, _nextTime = _gap, _listeners = [], _id, _req, _raf, _self, _delta, _i, _tick = function _tick(v) {\n            var elapsed = _getTime() - _lastUpdate, manual = v === true, overlap, dispatch, time, frame;\n            elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);\n            _lastUpdate += elapsed;\n            time = _lastUpdate - _startTime;\n            overlap = time - _nextTime;\n            if (overlap > 0 || manual) {\n                frame = ++_self.frame;\n                _delta = time - _self.time * 1000;\n                _self.time = time = time / 1000;\n                _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\n                dispatch = 1;\n            }\n            manual || (_id = _req(_tick));\n            if (dispatch) {\n                for(_i = 0; _i < _listeners.length; _i++){\n                    _listeners[_i](time, _delta, frame, v);\n                }\n            }\n        };\n        _self = {\n            time: 0,\n            frame: 0,\n            tick: function tick() {\n                _tick(true);\n            },\n            deltaRatio: function deltaRatio(fps) {\n                return _delta / (1000 / (fps || 60));\n            },\n            wake: function wake() {\n                if (_coreReady) {\n                    if (!_coreInitted && _windowExists()) {\n                        _win = _coreInitted = window;\n                        _doc = _win.document || {};\n                        _globals.gsap = gsap;\n                        (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\n                        _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\n                        _raf = _win.requestAnimationFrame;\n                    }\n                    _id && _self.sleep();\n                    _req = _raf || function(f) {\n                        return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\n                    };\n                    _tickerActive = 1;\n                    _tick(2);\n                }\n            },\n            sleep: function sleep() {\n                (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);\n                _tickerActive = 0;\n                _req = _emptyFunc;\n            },\n            lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\n                _lagThreshold = threshold || 1 / _tinyNum;\n                _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n            },\n            fps: function fps(_fps) {\n                _gap = 1000 / (_fps || 240);\n                _nextTime = _self.time * 1000 + _gap;\n            },\n            add: function add(callback, once, prioritize) {\n                var func = once ? function(t, d, f, v) {\n                    callback(t, d, f, v);\n                    _self.remove(func);\n                } : callback;\n                _self.remove(callback);\n                _listeners[prioritize ? \"unshift\" : \"push\"](func);\n                _wake();\n                return func;\n            },\n            remove: function remove(callback, i) {\n                ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\n            },\n            _listeners: _listeners\n        };\n        return _self;\n    }(), _wake = function _wake() {\n        return !_tickerActive && _ticker.wake();\n    }, _easeMap = {}, _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/, _quotesExp = /[\"']/g, _parseObjectInString = function _parseObjectInString(value) {\n        var obj = {}, split = value.substr(1, value.length - 3).split(\":\"), key = split[0], i = 1, l = split.length, index, val, parsedVal;\n        for(; i < l; i++){\n            val = split[i];\n            index = i !== l - 1 ? val.lastIndexOf(\",\") : val.length;\n            parsedVal = val.substr(0, index);\n            obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, \"\").trim() : +parsedVal;\n            key = val.substr(index + 1).trim();\n        }\n        return obj;\n    }, _valueInParentheses = function _valueInParentheses(value) {\n        var open = value.indexOf(\"(\") + 1, close = value.indexOf(\")\"), nested = value.indexOf(\"(\", open);\n        return value.substring(open, ~nested && nested < close ? value.indexOf(\")\", close + 1) : close);\n    }, _configEaseFromString = function _configEaseFromString(name) {\n        var split = (name + \"\").split(\"(\"), ease = _easeMap[split[0]];\n        return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf(\"{\") ? [\n            _parseObjectInString(split[1])\n        ] : _valueInParentheses(name).split(\",\").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE(\"\", name) : ease;\n    }, _invertEase = function _invertEase(ease) {\n        return function(p) {\n            return 1 - ease(1 - p);\n        };\n    }, _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\n        var child = timeline._first, ease;\n        while(child){\n            if (child instanceof Timeline) {\n                _propagateYoyoEase(child, isYoyo);\n            } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\n                if (child.timeline) {\n                    _propagateYoyoEase(child.timeline, isYoyo);\n                } else {\n                    ease = child._ease;\n                    child._ease = child._yEase;\n                    child._yEase = ease;\n                    child._yoyo = isYoyo;\n                }\n            }\n            child = child._next;\n        }\n    }, _parseEase = function _parseEase(ease, defaultEase) {\n        return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\n    }, _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\n        if (easeOut === void 0) {\n            easeOut = function easeOut(p) {\n                return 1 - easeIn(1 - p);\n            };\n        }\n        if (easeInOut === void 0) {\n            easeInOut = function easeInOut(p) {\n                return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\n            };\n        }\n        var ease = {\n            easeIn: easeIn,\n            easeOut: easeOut,\n            easeInOut: easeInOut\n        }, lowercaseName;\n        _forEachName(names, function(name) {\n            _easeMap[name] = _globals[name] = ease;\n            _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\n            for(var p in ease){\n                _easeMap[lowercaseName + (p === \"easeIn\" ? \".in\" : p === \"easeOut\" ? \".out\" : \".inOut\")] = _easeMap[name + \".\" + p] = ease[p];\n            }\n        });\n        return ease;\n    }, _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\n        return function(p) {\n            return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\n        };\n    }, _configElastic = function _configElastic(type, amplitude, period) {\n        var p1 = amplitude >= 1 ? amplitude : 1, p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1), p3 = p2 / _2PI * (Math.asin(1 / p1) || 0), easeOut = function easeOut(p) {\n            return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\n        }, ease = type === \"out\" ? easeOut : type === \"in\" ? function(p) {\n            return 1 - easeOut(1 - p);\n        } : _easeInOutFromOut(easeOut);\n        p2 = _2PI / p2;\n        ease.config = function(amplitude, period) {\n            return _configElastic(type, amplitude, period);\n        };\n        return ease;\n    }, _configBack = function _configBack(type, overshoot) {\n        if (overshoot === void 0) {\n            overshoot = 1.70158;\n        }\n        var easeOut = function easeOut(p) {\n            return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\n        }, ease = type === \"out\" ? easeOut : type === \"in\" ? function(p) {\n            return 1 - easeOut(1 - p);\n        } : _easeInOutFromOut(easeOut);\n        ease.config = function(overshoot) {\n            return _configBack(type, overshoot);\n        };\n        return ease;\n    };\n    _forEachName(\"Linear,Quad,Cubic,Quart,Quint,Strong\", function(name, i) {\n        var power = i < 5 ? i + 1 : i;\n        _insertEase(name + \",Power\" + (power - 1), i ? function(p) {\n            return Math.pow(p, power);\n        } : function(p) {\n            return p;\n        }, function(p) {\n            return 1 - Math.pow(1 - p, power);\n        }, function(p) {\n            return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\n        });\n    });\n    _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\n    _insertEase(\"Elastic\", _configElastic(\"in\"), _configElastic(\"out\"), _configElastic());\n    (function(n, c) {\n        var n1 = 1 / c, n2 = 2 * n1, n3 = 2.5 * n1, easeOut = function easeOut(p) {\n            return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\n        };\n        _insertEase(\"Bounce\", function(p) {\n            return 1 - easeOut(1 - p);\n        }, easeOut);\n    })(7.5625, 2.75);\n    _insertEase(\"Expo\", function(p) {\n        return p ? Math.pow(2, 10 * (p - 1)) : 0;\n    });\n    _insertEase(\"Circ\", function(p) {\n        return -(_sqrt(1 - p * p) - 1);\n    });\n    _insertEase(\"Sine\", function(p) {\n        return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\n    });\n    _insertEase(\"Back\", _configBack(\"in\"), _configBack(\"out\"), _configBack());\n    _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\n        config: function config(steps, immediateStart) {\n            if (steps === void 0) {\n                steps = 1;\n            }\n            var p1 = 1 / steps, p2 = steps + (immediateStart ? 0 : 1), p3 = immediateStart ? 1 : 0, max = 1 - _tinyNum;\n            return function(p) {\n                return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\n            };\n        }\n    };\n    _defaults.ease = _easeMap[\"quad.out\"];\n    _forEachName(\"onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt\", function(name) {\n        return _callbackNames += name + \",\" + name + \"Params,\";\n    });\n    var GSCache = function GSCache(target, harness) {\n        this.id = _gsID++;\n        target._gsap = this;\n        this.target = target;\n        this.harness = harness;\n        this.get = harness ? harness.get : _getProperty;\n        this.set = harness ? harness.getSetter : _getSetter;\n    };\n    var Animation = function() {\n        function Animation(vars) {\n            this.vars = vars;\n            this._delay = +vars.delay || 0;\n            if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\n                this._rDelay = vars.repeatDelay || 0;\n                this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\n            }\n            this._ts = 1;\n            _setDuration(this, +vars.duration, 1, 1);\n            this.data = vars.data;\n            if (_context) {\n                this._ctx = _context;\n                _context.data.push(this);\n            }\n            _tickerActive || _ticker.wake();\n        }\n        var _proto = Animation.prototype;\n        _proto.delay = function delay(value) {\n            if (value || value === 0) {\n                this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\n                this._delay = value;\n                return this;\n            }\n            return this._delay;\n        };\n        _proto.duration = function duration(value) {\n            return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\n        };\n        _proto.totalDuration = function totalDuration(value) {\n            if (!arguments.length) {\n                return this._tDur;\n            }\n            this._dirty = 0;\n            return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\n        };\n        _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\n            _wake();\n            if (!arguments.length) {\n                return this._tTime;\n            }\n            var parent = this._dp;\n            if (parent && parent.smoothChildTiming && this._ts) {\n                _alignPlayhead(this, _totalTime);\n                !parent._dp || parent.parent || _postAddChecks(parent, this);\n                while(parent && parent.parent){\n                    if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\n                        parent.totalTime(parent._tTime, true);\n                    }\n                    parent = parent.parent;\n                }\n                if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\n                    _addToTimeline(this._dp, this, this._start - this._delay);\n                }\n            }\n            if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\n                this._ts || (this._pTime = _totalTime);\n                _lazySafeRender(this, _totalTime, suppressEvents);\n            }\n            return this;\n        };\n        _proto.time = function time(value, suppressEvents) {\n            return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;\n        };\n        _proto.totalProgress = function totalProgress(value, suppressEvents) {\n            return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;\n        };\n        _proto.progress = function progress(value, suppressEvents) {\n            return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;\n        };\n        _proto.iteration = function iteration(value, suppressEvents) {\n            var cycleDuration = this.duration() + this._rDelay;\n            return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\n        };\n        _proto.timeScale = function timeScale(value) {\n            if (!arguments.length) {\n                return this._rts === -_tinyNum ? 0 : this._rts;\n            }\n            if (this._rts === value) {\n                return this;\n            }\n            var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;\n            this._rts = +value || 0;\n            this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;\n            this.totalTime(_clamp(-this._delay, this._tDur, tTime), true);\n            _setEnd(this);\n            return _recacheAncestors(this);\n        };\n        _proto.paused = function paused(value) {\n            if (!arguments.length) {\n                return this._ps;\n            }\n            if (this._ps !== value) {\n                this._ps = value;\n                if (value) {\n                    this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());\n                    this._ts = this._act = 0;\n                } else {\n                    _wake();\n                    this._ts = this._rts;\n                    this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));\n                }\n            }\n            return this;\n        };\n        _proto.startTime = function startTime(value) {\n            if (arguments.length) {\n                this._start = value;\n                var parent = this.parent || this._dp;\n                parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\n                return this;\n            }\n            return this._start;\n        };\n        _proto.endTime = function endTime(includeRepeats) {\n            return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);\n        };\n        _proto.rawTime = function rawTime(wrapRepeats) {\n            var parent = this.parent || this._dp;\n            return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\n        };\n        _proto.revert = function revert(config) {\n            if (config === void 0) {\n                config = _revertConfig;\n            }\n            var prevIsReverting = _reverting;\n            _reverting = config;\n            this.timeline && this.timeline.revert(config);\n            this.totalTime(-0.01, config.suppressEvents);\n            this.data !== \"nested\" && _removeFromParent(this);\n            _reverting = prevIsReverting;\n            return this;\n        };\n        _proto.globalTime = function globalTime(rawTime) {\n            var animation = this, time = arguments.length ? rawTime : animation.rawTime();\n            while(animation){\n                time = animation._start + time / (animation._ts || 1);\n                animation = animation._dp;\n            }\n            return !this.parent && this.vars.immediateRender ? -1 : time;\n        };\n        _proto.repeat = function repeat(value) {\n            if (arguments.length) {\n                this._repeat = value === Infinity ? -2 : value;\n                return _onUpdateTotalDuration(this);\n            }\n            return this._repeat === -2 ? Infinity : this._repeat;\n        };\n        _proto.repeatDelay = function repeatDelay(value) {\n            if (arguments.length) {\n                var time = this._time;\n                this._rDelay = value;\n                _onUpdateTotalDuration(this);\n                return time ? this.time(time) : this;\n            }\n            return this._rDelay;\n        };\n        _proto.yoyo = function yoyo(value) {\n            if (arguments.length) {\n                this._yoyo = value;\n                return this;\n            }\n            return this._yoyo;\n        };\n        _proto.seek = function seek(position, suppressEvents) {\n            return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\n        };\n        _proto.restart = function restart(includeDelay, suppressEvents) {\n            return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\n        };\n        _proto.play = function play(from, suppressEvents) {\n            from != null && this.seek(from, suppressEvents);\n            return this.reversed(false).paused(false);\n        };\n        _proto.reverse = function reverse(from, suppressEvents) {\n            from != null && this.seek(from || this.totalDuration(), suppressEvents);\n            return this.reversed(true).paused(false);\n        };\n        _proto.pause = function pause(atTime, suppressEvents) {\n            atTime != null && this.seek(atTime, suppressEvents);\n            return this.paused(true);\n        };\n        _proto.resume = function resume() {\n            return this.paused(false);\n        };\n        _proto.reversed = function reversed(value) {\n            if (arguments.length) {\n                !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));\n                return this;\n            }\n            return this._rts < 0;\n        };\n        _proto.invalidate = function invalidate() {\n            this._initted = this._act = 0;\n            this._zTime = -_tinyNum;\n            return this;\n        };\n        _proto.isActive = function isActive() {\n            var parent = this.parent || this._dp, start = this._start, rawTime;\n            return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\n        };\n        _proto.eventCallback = function eventCallback(type, callback, params) {\n            var vars = this.vars;\n            if (arguments.length > 1) {\n                if (!callback) {\n                    delete vars[type];\n                } else {\n                    vars[type] = callback;\n                    params && (vars[type + \"Params\"] = params);\n                    type === \"onUpdate\" && (this._onUpdate = callback);\n                }\n                return this;\n            }\n            return vars[type];\n        };\n        _proto.then = function then(onFulfilled) {\n            var self1 = this;\n            return new Promise(function(resolve) {\n                var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough, _resolve = function _resolve() {\n                    var _then = self1.then;\n                    self1.then = null;\n                    _isFunction(f) && (f = f(self1)) && (f.then || f === self1) && (self1.then = _then);\n                    resolve(f);\n                    self1.then = _then;\n                };\n                if (self1._initted && self1.totalProgress() === 1 && self1._ts >= 0 || !self1._tTime && self1._ts < 0) {\n                    _resolve();\n                } else {\n                    self1._prom = _resolve;\n                }\n            });\n        };\n        _proto.kill = function kill() {\n            _interrupt(this);\n        };\n        return Animation;\n    }();\n    _setDefaults(Animation.prototype, {\n        _time: 0,\n        _start: 0,\n        _end: 0,\n        _tTime: 0,\n        _tDur: 0,\n        _dirty: 0,\n        _repeat: 0,\n        _yoyo: false,\n        parent: null,\n        _initted: false,\n        _rDelay: 0,\n        _ts: 1,\n        _dp: 0,\n        ratio: 0,\n        _zTime: -_tinyNum,\n        _prom: 0,\n        _ps: false,\n        _rts: 1\n    });\n    var Timeline = function(_Animation) {\n        _inheritsLoose(Timeline, _Animation);\n        function Timeline(vars, position) {\n            var _this;\n            if (vars === void 0) {\n                vars = {};\n            }\n            _this = _Animation.call(this, vars) || this;\n            _this.labels = {};\n            _this.smoothChildTiming = !!vars.smoothChildTiming;\n            _this.autoRemoveChildren = !!vars.autoRemoveChildren;\n            _this._sort = _isNotFalse(vars.sortChildren);\n            _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);\n            vars.reversed && _this.reverse();\n            vars.paused && _this.paused(true);\n            vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\n            return _this;\n        }\n        var _proto2 = Timeline.prototype;\n        _proto2.to = function to(targets, vars, position) {\n            _createTweenType(0, arguments, this);\n            return this;\n        };\n        _proto2.from = function from(targets, vars, position) {\n            _createTweenType(1, arguments, this);\n            return this;\n        };\n        _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\n            _createTweenType(2, arguments, this);\n            return this;\n        };\n        _proto2.set = function set(targets, vars, position) {\n            vars.duration = 0;\n            vars.parent = this;\n            _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\n            vars.immediateRender = !!vars.immediateRender;\n            new Tween(targets, vars, _parsePosition(this, position), 1);\n            return this;\n        };\n        _proto2.call = function call(callback, params, position) {\n            return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);\n        };\n        _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n            vars.duration = duration;\n            vars.stagger = vars.stagger || stagger;\n            vars.onComplete = onCompleteAll;\n            vars.onCompleteParams = onCompleteAllParams;\n            vars.parent = this;\n            new Tween(targets, vars, _parsePosition(this, position));\n            return this;\n        };\n        _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n            vars.runBackwards = 1;\n            _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\n            return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\n        };\n        _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\n            toVars.startAt = fromVars;\n            _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\n            return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\n        };\n        _proto2.render = function render(totalTime, suppressEvents, force) {\n            var prevTime = this._time, tDur = this._dirty ? this.totalDuration() : this._tDur, dur = this._dur, tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime), crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur), time, child, next, iteration, cycleDuration, prevPaused, pauseTween, timeScale, prevStart, prevIteration, yoyo, isYoyo;\n            this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);\n            if (tTime !== this._tTime || force || crossingStart) {\n                if (prevTime !== this._time && dur) {\n                    tTime += this._time - prevTime;\n                    totalTime += this._time - prevTime;\n                }\n                time = tTime;\n                prevStart = this._start;\n                timeScale = this._ts;\n                prevPaused = !timeScale;\n                if (crossingStart) {\n                    dur || (prevTime = this._zTime);\n                    (totalTime || !suppressEvents) && (this._zTime = totalTime);\n                }\n                if (this._repeat) {\n                    yoyo = this._yoyo;\n                    cycleDuration = dur + this._rDelay;\n                    if (this._repeat < -1 && totalTime < 0) {\n                        return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n                    }\n                    time = _roundPrecise(tTime % cycleDuration);\n                    if (tTime === tDur) {\n                        iteration = this._repeat;\n                        time = dur;\n                    } else {\n                        iteration = ~~(tTime / cycleDuration);\n                        if (iteration && iteration === tTime / cycleDuration) {\n                            time = dur;\n                            iteration--;\n                        }\n                        time > dur && (time = dur);\n                    }\n                    prevIteration = _animationCycle(this._tTime, cycleDuration);\n                    !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration);\n                    if (yoyo && iteration & 1) {\n                        time = dur - time;\n                        isYoyo = 1;\n                    }\n                    if (iteration !== prevIteration && !this._lock) {\n                        var rewinding = yoyo && prevIteration & 1, doesWrap = rewinding === (yoyo && iteration & 1);\n                        iteration < prevIteration && (rewinding = !rewinding);\n                        prevTime = rewinding ? 0 : dur;\n                        this._lock = 1;\n                        this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\n                        this._tTime = tTime;\n                        !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n                        this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\n                        if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {\n                            return this;\n                        }\n                        dur = this._dur;\n                        tDur = this._tDur;\n                        if (doesWrap) {\n                            this._lock = 2;\n                            prevTime = rewinding ? dur : -0.0001;\n                            this.render(prevTime, true);\n                            this.vars.repeatRefresh && !isYoyo && this.invalidate();\n                        }\n                        this._lock = 0;\n                        if (!this._ts && !prevPaused) {\n                            return this;\n                        }\n                        _propagateYoyoEase(this, isYoyo);\n                    }\n                }\n                if (this._hasPause && !this._forcing && this._lock < 2) {\n                    pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));\n                    if (pauseTween) {\n                        tTime -= time - (time = pauseTween._start);\n                    }\n                }\n                this._tTime = tTime;\n                this._time = time;\n                this._act = !timeScale;\n                if (!this._initted) {\n                    this._onUpdate = this.vars.onUpdate;\n                    this._initted = 1;\n                    this._zTime = totalTime;\n                    prevTime = 0;\n                }\n                if (!prevTime && time && !suppressEvents) {\n                    _callback(this, \"onStart\");\n                    if (this._tTime !== tTime) {\n                        return this;\n                    }\n                }\n                if (time >= prevTime && totalTime >= 0) {\n                    child = this._first;\n                    while(child){\n                        next = child._next;\n                        if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\n                            if (child.parent !== this) {\n                                return this.render(totalTime, suppressEvents, force);\n                            }\n                            child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\n                            if (time !== this._time || !this._ts && !prevPaused) {\n                                pauseTween = 0;\n                                next && (tTime += this._zTime = -_tinyNum);\n                                break;\n                            }\n                        }\n                        child = next;\n                    }\n                } else {\n                    force = force || _reverting;\n                    child = this._last;\n                    var adjustedTime = totalTime < 0 ? totalTime : time;\n                    while(child){\n                        next = child._prev;\n                        if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\n                            if (child.parent !== this) {\n                                return this.render(totalTime, suppressEvents, force);\n                            }\n                            child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);\n                            if (time !== this._time || !this._ts && !prevPaused) {\n                                pauseTween = 0;\n                                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);\n                                break;\n                            }\n                        }\n                        child = next;\n                    }\n                }\n                if (pauseTween && !suppressEvents) {\n                    this.pause();\n                    pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\n                    if (this._ts) {\n                        this._start = prevStart;\n                        _setEnd(this);\n                        return this.render(totalTime, suppressEvents, force);\n                    }\n                }\n                this._onUpdate && !suppressEvents && _callback(this, \"onUpdate\", true);\n                if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) {\n                    if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) {\n                        if (!this._lock) {\n                            (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n                            if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {\n                                _callback(this, tTime === tDur && totalTime >= 0 ? \"onComplete\" : \"onReverseComplete\", true);\n                                this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n                            }\n                        }\n                    }\n                }\n            }\n            return this;\n        };\n        _proto2.add = function add(child, position) {\n            var _this2 = this;\n            _isNumber(position) || (position = _parsePosition(this, position, child));\n            if (!(child instanceof Animation)) {\n                if (_isArray(child)) {\n                    child.forEach(function(obj) {\n                        return _this2.add(obj, position);\n                    });\n                    return this;\n                }\n                if (_isString(child)) {\n                    return this.addLabel(child, position);\n                }\n                if (_isFunction(child)) {\n                    child = Tween.delayedCall(0, child);\n                } else {\n                    return this;\n                }\n            }\n            return this !== child ? _addToTimeline(this, child, position) : this;\n        };\n        _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\n            if (nested === void 0) {\n                nested = true;\n            }\n            if (tweens === void 0) {\n                tweens = true;\n            }\n            if (timelines === void 0) {\n                timelines = true;\n            }\n            if (ignoreBeforeTime === void 0) {\n                ignoreBeforeTime = -_bigNum;\n            }\n            var a = [], child = this._first;\n            while(child){\n                if (child._start >= ignoreBeforeTime) {\n                    if (child instanceof Tween) {\n                        tweens && a.push(child);\n                    } else {\n                        timelines && a.push(child);\n                        nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\n                    }\n                }\n                child = child._next;\n            }\n            return a;\n        };\n        _proto2.getById = function getById(id) {\n            var animations = this.getChildren(1, 1, 1), i = animations.length;\n            while(i--){\n                if (animations[i].vars.id === id) {\n                    return animations[i];\n                }\n            }\n        };\n        _proto2.remove = function remove(child) {\n            if (_isString(child)) {\n                return this.removeLabel(child);\n            }\n            if (_isFunction(child)) {\n                return this.killTweensOf(child);\n            }\n            _removeLinkedListItem(this, child);\n            if (child === this._recent) {\n                this._recent = this._last;\n            }\n            return _uncache(this);\n        };\n        _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\n            if (!arguments.length) {\n                return this._tTime;\n            }\n            this._forcing = 1;\n            if (!this._dp && this._ts) {\n                this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\n            }\n            _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\n            this._forcing = 0;\n            return this;\n        };\n        _proto2.addLabel = function addLabel(label, position) {\n            this.labels[label] = _parsePosition(this, position);\n            return this;\n        };\n        _proto2.removeLabel = function removeLabel(label) {\n            delete this.labels[label];\n            return this;\n        };\n        _proto2.addPause = function addPause(position, callback, params) {\n            var t = Tween.delayedCall(0, callback || _emptyFunc, params);\n            t.data = \"isPause\";\n            this._hasPause = 1;\n            return _addToTimeline(this, t, _parsePosition(this, position));\n        };\n        _proto2.removePause = function removePause(position) {\n            var child = this._first;\n            position = _parsePosition(this, position);\n            while(child){\n                if (child._start === position && child.data === \"isPause\") {\n                    _removeFromParent(child);\n                }\n                child = child._next;\n            }\n        };\n        _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n            var tweens = this.getTweensOf(targets, onlyActive), i = tweens.length;\n            while(i--){\n                _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\n            }\n            return this;\n        };\n        _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\n            var a = [], parsedTargets = toArray(targets), child = this._first, isGlobalTime = _isNumber(onlyActive), children;\n            while(child){\n                if (child instanceof Tween) {\n                    if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\n                        a.push(child);\n                    }\n                } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\n                    a.push.apply(a, children);\n                }\n                child = child._next;\n            }\n            return a;\n        };\n        _proto2.tweenTo = function tweenTo(position, vars) {\n            vars = vars || {};\n            var tl = this, endTime = _parsePosition(tl, position), _vars = vars, startAt = _vars.startAt, _onStart = _vars.onStart, onStartParams = _vars.onStartParams, immediateRender = _vars.immediateRender, initted, tween = Tween.to(tl, _setDefaults({\n                ease: vars.ease || \"none\",\n                lazy: false,\n                immediateRender: false,\n                time: endTime,\n                overwrite: \"auto\",\n                duration: vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\n                onStart: function onStart() {\n                    tl.pause();\n                    if (!initted) {\n                        var duration = vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale());\n                        tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\n                        initted = 1;\n                    }\n                    _onStart && _onStart.apply(tween, onStartParams || []);\n                }\n            }, vars));\n            return immediateRender ? tween.render(0) : tween;\n        };\n        _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\n            return this.tweenTo(toPosition, _setDefaults({\n                startAt: {\n                    time: _parsePosition(this, fromPosition)\n                }\n            }, vars));\n        };\n        _proto2.recent = function recent() {\n            return this._recent;\n        };\n        _proto2.nextLabel = function nextLabel(afterTime) {\n            if (afterTime === void 0) {\n                afterTime = this._time;\n            }\n            return _getLabelInDirection(this, _parsePosition(this, afterTime));\n        };\n        _proto2.previousLabel = function previousLabel(beforeTime) {\n            if (beforeTime === void 0) {\n                beforeTime = this._time;\n            }\n            return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\n        };\n        _proto2.currentLabel = function currentLabel(value) {\n            return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\n        };\n        _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\n            if (ignoreBeforeTime === void 0) {\n                ignoreBeforeTime = 0;\n            }\n            var child = this._first, labels = this.labels, p;\n            while(child){\n                if (child._start >= ignoreBeforeTime) {\n                    child._start += amount;\n                    child._end += amount;\n                }\n                child = child._next;\n            }\n            if (adjustLabels) {\n                for(p in labels){\n                    if (labels[p] >= ignoreBeforeTime) {\n                        labels[p] += amount;\n                    }\n                }\n            }\n            return _uncache(this);\n        };\n        _proto2.invalidate = function invalidate() {\n            var child = this._first;\n            this._lock = 0;\n            while(child){\n                child.invalidate();\n                child = child._next;\n            }\n            return _Animation.prototype.invalidate.call(this);\n        };\n        _proto2.clear = function clear(includeLabels) {\n            if (includeLabels === void 0) {\n                includeLabels = true;\n            }\n            var child = this._first, next;\n            while(child){\n                next = child._next;\n                this.remove(child);\n                child = next;\n            }\n            this._dp && (this._time = this._tTime = this._pTime = 0);\n            includeLabels && (this.labels = {});\n            return _uncache(this);\n        };\n        _proto2.totalDuration = function totalDuration(value) {\n            var max = 0, self1 = this, child = self1._last, prevStart = _bigNum, prev, start, parent;\n            if (arguments.length) {\n                return self1.timeScale((self1._repeat < 0 ? self1.duration() : self1.totalDuration()) / (self1.reversed() ? -value : value));\n            }\n            if (self1._dirty) {\n                parent = self1.parent;\n                while(child){\n                    prev = child._prev;\n                    child._dirty && child.totalDuration();\n                    start = child._start;\n                    if (start > prevStart && self1._sort && child._ts && !self1._lock) {\n                        self1._lock = 1;\n                        _addToTimeline(self1, child, start - child._delay, 1)._lock = 0;\n                    } else {\n                        prevStart = start;\n                    }\n                    if (start < 0 && child._ts) {\n                        max -= start;\n                        if (!parent && !self1._dp || parent && parent.smoothChildTiming) {\n                            self1._start += start / self1._ts;\n                            self1._time -= start;\n                            self1._tTime -= start;\n                        }\n                        self1.shiftChildren(-start, false, -Infinity);\n                        prevStart = 0;\n                    }\n                    child._end > max && child._ts && (max = child._end);\n                    child = prev;\n                }\n                _setDuration(self1, self1 === _globalTimeline && self1._time > max ? self1._time : max, 1, 1);\n                self1._dirty = 0;\n            }\n            return self1._tDur;\n        };\n        Timeline.updateRoot = function updateRoot(time) {\n            if (_globalTimeline._ts) {\n                _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\n                _lastRenderedFrame = _ticker.frame;\n            }\n            if (_ticker.frame >= _nextGCFrame) {\n                _nextGCFrame += _config.autoSleep || 120;\n                var child = _globalTimeline._first;\n                if (!child || !child._ts) {\n                    if (_config.autoSleep && _ticker._listeners.length < 2) {\n                        while(child && !child._ts){\n                            child = child._next;\n                        }\n                        child || _ticker.sleep();\n                    }\n                }\n            }\n        };\n        return Timeline;\n    }(Animation);\n    _setDefaults(Timeline.prototype, {\n        _lock: 0,\n        _hasPause: 0,\n        _forcing: 0\n    });\n    var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\n        var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter), index = 0, matchIndex = 0, result, startNums, color, endNum, chunk, startNum, hasRandom, a;\n        pt.b = start;\n        pt.e = end;\n        start += \"\";\n        end += \"\";\n        if (hasRandom = ~end.indexOf(\"random(\")) {\n            end = _replaceRandom(end);\n        }\n        if (stringFilter) {\n            a = [\n                start,\n                end\n            ];\n            stringFilter(a, target, prop);\n            start = a[0];\n            end = a[1];\n        }\n        startNums = start.match(_complexStringNumExp) || [];\n        while(result = _complexStringNumExp.exec(end)){\n            endNum = result[0];\n            chunk = end.substring(index, result.index);\n            if (color) {\n                color = (color + 1) % 5;\n            } else if (chunk.substr(-5) === \"rgba(\") {\n                color = 1;\n            }\n            if (endNum !== startNums[matchIndex++]) {\n                startNum = parseFloat(startNums[matchIndex - 1]) || 0;\n                pt._pt = {\n                    _next: pt._pt,\n                    p: chunk || matchIndex === 1 ? chunk : \",\",\n                    s: startNum,\n                    c: endNum.charAt(1) === \"=\" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,\n                    m: color && color < 4 ? Math.round : 0\n                };\n                index = _complexStringNumExp.lastIndex;\n            }\n        }\n        pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n        pt.fp = funcParam;\n        if (_relExp.test(end) || hasRandom) {\n            pt.e = 0;\n        }\n        this._pt = pt;\n        return pt;\n    }, _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {\n        _isFunction(end) && (end = end(index || 0, target, targets));\n        var currentValue = target[prop], parsedStart = start !== \"get\" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf(\"set\") || !_isFunction(target[\"get\" + prop.substr(3)]) ? prop : \"get\" + prop.substr(3)](funcParam) : target[prop](), setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc, pt;\n        if (_isString(end)) {\n            if (~end.indexOf(\"random(\")) {\n                end = _replaceRandom(end);\n            }\n            if (end.charAt(1) === \"=\") {\n                pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);\n                if (pt || pt === 0) {\n                    end = pt;\n                }\n            }\n        }\n        if (!optional || parsedStart !== end || _forceAllPropTweens) {\n            if (!isNaN(parsedStart * end) && end !== \"\") {\n                pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === \"boolean\" ? _renderBoolean : _renderPlain, 0, setter);\n                funcParam && (pt.fp = funcParam);\n                modifier && pt.modifier(modifier, this, target);\n                return this._pt = pt;\n            }\n            !currentValue && !(prop in target) && _missingPlugin(prop, end);\n            return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\n        }\n    }, _processVars = function _processVars(vars, index, target, targets, tween) {\n        _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\n        if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\n            return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\n        }\n        var copy = {}, p;\n        for(p in vars){\n            copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\n        }\n        return copy;\n    }, _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\n        var plugin, pt, ptLookup, i;\n        if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\n            tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\n            if (tween !== _quickTween) {\n                ptLookup = tween._ptLookup[tween._targets.indexOf(target)];\n                i = plugin._props.length;\n                while(i--){\n                    ptLookup[plugin._props[i]] = pt;\n                }\n            }\n        }\n        return plugin;\n    }, _overwritingTween, _forceAllPropTweens, _initTween = function _initTween(tween, time) {\n        var vars = tween.vars, ease = vars.ease, startAt = vars.startAt, immediateRender = vars.immediateRender, lazy = vars.lazy, onUpdate = vars.onUpdate, onUpdateParams = vars.onUpdateParams, callbackScope = vars.callbackScope, runBackwards = vars.runBackwards, yoyoEase = vars.yoyoEase, keyframes = vars.keyframes, autoRevert = vars.autoRevert, dur = tween._dur, prevStartAt = tween._startAt, targets = tween._targets, parent = tween.parent, fullTargets = parent && parent.data === \"nested\" ? parent.vars.targets : targets, autoOverwrite = tween._overwrite === \"auto\" && !_suppressOverwrites, tl = tween.timeline, cleanVars, i, p, pt, target, hasPriority, gsData, harness, plugin, ptLookup, index, harnessVars, overwritten;\n        tl && (!keyframes || !ease) && (ease = \"none\");\n        tween._ease = _parseEase(ease, _defaults.ease);\n        tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\n        if (yoyoEase && tween._yoyo && !tween._repeat) {\n            yoyoEase = tween._yEase;\n            tween._yEase = tween._ease;\n            tween._ease = yoyoEase;\n        }\n        tween._from = !tl && !!vars.runBackwards;\n        if (!tl || keyframes && !vars.stagger) {\n            harness = targets[0] ? _getCache(targets[0]).harness : 0;\n            harnessVars = harness && vars[harness.prop];\n            cleanVars = _copyExcluding(vars, _reservedProps);\n            if (prevStartAt) {\n                time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfig : _startAtRevertConfig);\n                prevStartAt._lazy = 0;\n            }\n            if (startAt) {\n                _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\n                    data: \"isStart\",\n                    overwrite: false,\n                    parent: parent,\n                    immediateRender: true,\n                    lazy: _isNotFalse(lazy),\n                    startAt: null,\n                    delay: 0,\n                    onUpdate: onUpdate,\n                    onUpdateParams: onUpdateParams,\n                    callbackScope: callbackScope,\n                    stagger: 0\n                }, startAt)));\n                time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfig);\n                if (immediateRender) {\n                    if (dur && time <= 0) {\n                        time && (tween._zTime = time);\n                        return;\n                    }\n                }\n            } else if (runBackwards && dur) {\n                if (!prevStartAt) {\n                    time && (immediateRender = false);\n                    p = _setDefaults({\n                        overwrite: false,\n                        data: \"isFromStart\",\n                        lazy: immediateRender && _isNotFalse(lazy),\n                        immediateRender: immediateRender,\n                        stagger: 0,\n                        parent: parent\n                    }, cleanVars);\n                    harnessVars && (p[harness.prop] = harnessVars);\n                    _removeFromParent(tween._startAt = Tween.set(targets, p));\n                    time < 0 && (_reverting ? tween._startAt.revert(_revertConfig) : tween._startAt.render(-1, true));\n                    tween._zTime = time;\n                    if (!immediateRender) {\n                        _initTween(tween._startAt, _tinyNum);\n                    } else if (!time) {\n                        return;\n                    }\n                }\n            }\n            tween._pt = tween._ptCache = 0;\n            lazy = dur && _isNotFalse(lazy) || lazy && !dur;\n            for(i = 0; i < targets.length; i++){\n                target = targets[i];\n                gsData = target._gsap || _harness(targets)[i]._gsap;\n                tween._ptLookup[i] = ptLookup = {};\n                _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();\n                index = fullTargets === targets ? i : fullTargets.indexOf(target);\n                if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\n                    tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\n                    plugin._props.forEach(function(name) {\n                        ptLookup[name] = pt;\n                    });\n                    plugin.priority && (hasPriority = 1);\n                }\n                if (!harness || harnessVars) {\n                    for(p in cleanVars){\n                        if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\n                            plugin.priority && (hasPriority = 1);\n                        } else {\n                            ptLookup[p] = pt = _addPropTween.call(tween, target, p, \"get\", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\n                        }\n                    }\n                }\n                tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\n                if (autoOverwrite && tween._pt) {\n                    _overwritingTween = tween;\n                    _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time));\n                    overwritten = !tween.parent;\n                    _overwritingTween = 0;\n                }\n                tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\n            }\n            hasPriority && _sortPropTweensByPriority(tween);\n            tween._onInit && tween._onInit(tween);\n        }\n        tween._onUpdate = onUpdate;\n        tween._initted = (!tween._op || tween._pt) && !overwritten;\n        keyframes && time <= 0 && tl.render(_bigNum, true, true);\n    }, _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {\n        var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property], pt, rootPT, lookup, i;\n        if (!ptCache) {\n            ptCache = tween._ptCache[property] = [];\n            lookup = tween._ptLookup;\n            i = tween._targets.length;\n            while(i--){\n                pt = lookup[i][property];\n                if (pt && pt.d && pt.d._pt) {\n                    pt = pt.d._pt;\n                    while(pt && pt.p !== property && pt.fp !== property){\n                        pt = pt._next;\n                    }\n                }\n                if (!pt) {\n                    _forceAllPropTweens = 1;\n                    tween.vars[property] = \"+=0\";\n                    _initTween(tween, time);\n                    _forceAllPropTweens = 0;\n                    return 1;\n                }\n                ptCache.push(pt);\n            }\n        }\n        i = ptCache.length;\n        while(i--){\n            rootPT = ptCache[i];\n            pt = rootPT._pt || rootPT;\n            pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;\n            pt.c = value - pt.s;\n            rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e));\n            rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));\n        }\n    }, _addAliasesToVars = function _addAliasesToVars(targets, vars) {\n        var harness = targets[0] ? _getCache(targets[0]).harness : 0, propertyAliases = harness && harness.aliases, copy, p, i, aliases;\n        if (!propertyAliases) {\n            return vars;\n        }\n        copy = _merge({}, vars);\n        for(p in propertyAliases){\n            if (p in copy) {\n                aliases = propertyAliases[p].split(\",\");\n                i = aliases.length;\n                while(i--){\n                    copy[aliases[i]] = copy[p];\n                }\n            }\n        }\n        return copy;\n    }, _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {\n        var ease = obj.ease || easeEach || \"power1.inOut\", p, a;\n        if (_isArray(obj)) {\n            a = allProps[prop] || (allProps[prop] = []);\n            obj.forEach(function(value, i) {\n                return a.push({\n                    t: i / (obj.length - 1) * 100,\n                    v: value,\n                    e: ease\n                });\n            });\n        } else {\n            for(p in obj){\n                a = allProps[p] || (allProps[p] = []);\n                p === \"ease\" || a.push({\n                    t: parseFloat(prop),\n                    v: obj[p],\n                    e: ease\n                });\n            }\n        }\n    }, _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\n        return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf(\"random(\") ? _replaceRandom(value) : value;\n    }, _staggerTweenProps = _callbackNames + \"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert\", _staggerPropsToSkip = {};\n    _forEachName(_staggerTweenProps + \",id,stagger,delay,duration,paused,scrollTrigger\", function(name) {\n        return _staggerPropsToSkip[name] = 1;\n    });\n    var Tween = function(_Animation2) {\n        _inheritsLoose(Tween, _Animation2);\n        function Tween(targets, vars, position, skipInherit) {\n            var _this3;\n            if (typeof vars === \"number\") {\n                position.duration = vars;\n                vars = position;\n                position = null;\n            }\n            _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;\n            var _this3$vars = _this3.vars, duration = _this3$vars.duration, delay = _this3$vars.delay, immediateRender = _this3$vars.immediateRender, stagger = _this3$vars.stagger, overwrite = _this3$vars.overwrite, keyframes = _this3$vars.keyframes, defaults = _this3$vars.defaults, scrollTrigger = _this3$vars.scrollTrigger, yoyoEase = _this3$vars.yoyoEase, parent = vars.parent || _globalTimeline, parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : \"length\" in vars) ? [\n                targets\n            ] : toArray(targets), tl, i, copy, l, p, curTarget, staggerFunc, staggerVarsToMerge;\n            _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn(\"GSAP target \" + targets + \" not found. https://greensock.com\", !_config.nullTargetWarn) || [];\n            _this3._ptLookup = [];\n            _this3._overwrite = overwrite;\n            if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n                vars = _this3.vars;\n                tl = _this3.timeline = new Timeline({\n                    data: \"nested\",\n                    defaults: defaults || {},\n                    targets: parent && parent.data === \"nested\" ? parent.vars.targets : parsedTargets\n                });\n                tl.kill();\n                tl.parent = tl._dp = _assertThisInitialized(_this3);\n                tl._start = 0;\n                if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n                    l = parsedTargets.length;\n                    staggerFunc = stagger && distribute(stagger);\n                    if (_isObject(stagger)) {\n                        for(p in stagger){\n                            if (~_staggerTweenProps.indexOf(p)) {\n                                staggerVarsToMerge || (staggerVarsToMerge = {});\n                                staggerVarsToMerge[p] = stagger[p];\n                            }\n                        }\n                    }\n                    for(i = 0; i < l; i++){\n                        copy = _copyExcluding(vars, _staggerPropsToSkip);\n                        copy.stagger = 0;\n                        yoyoEase && (copy.yoyoEase = yoyoEase);\n                        staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\n                        curTarget = parsedTargets[i];\n                        copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\n                        copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\n                        if (!stagger && l === 1 && copy.delay) {\n                            _this3._delay = delay = copy.delay;\n                            _this3._start += delay;\n                            copy.delay = 0;\n                        }\n                        tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);\n                        tl._ease = _easeMap.none;\n                    }\n                    tl.duration() ? duration = delay = 0 : _this3.timeline = 0;\n                } else if (keyframes) {\n                    _inheritDefaults(_setDefaults(tl.vars.defaults, {\n                        ease: \"none\"\n                    }));\n                    tl._ease = _parseEase(keyframes.ease || vars.ease || \"none\");\n                    var time = 0, a, kf, v;\n                    if (_isArray(keyframes)) {\n                        keyframes.forEach(function(frame) {\n                            return tl.to(parsedTargets, frame, \">\");\n                        });\n                        tl.duration();\n                    } else {\n                        copy = {};\n                        for(p in keyframes){\n                            p === \"ease\" || p === \"easeEach\" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);\n                        }\n                        for(p in copy){\n                            a = copy[p].sort(function(a, b) {\n                                return a.t - b.t;\n                            });\n                            time = 0;\n                            for(i = 0; i < a.length; i++){\n                                kf = a[i];\n                                v = {\n                                    ease: kf.e,\n                                    duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration\n                                };\n                                v[p] = kf.v;\n                                tl.to(parsedTargets, v, time);\n                                time += v.duration;\n                            }\n                        }\n                        tl.duration() < duration && tl.to({}, {\n                            duration: duration - tl.duration()\n                        });\n                    }\n                }\n                duration || _this3.duration(duration = tl.duration());\n            } else {\n                _this3.timeline = 0;\n            }\n            if (overwrite === true && !_suppressOverwrites) {\n                _overwritingTween = _assertThisInitialized(_this3);\n                _globalTimeline.killTweensOf(parsedTargets);\n                _overwritingTween = 0;\n            }\n            _addToTimeline(parent, _assertThisInitialized(_this3), position);\n            vars.reversed && _this3.reverse();\n            vars.paused && _this3.paused(true);\n            if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== \"nested\") {\n                _this3._tTime = -_tinyNum;\n                _this3.render(Math.max(0, -delay));\n            }\n            scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\n            return _this3;\n        }\n        var _proto3 = Tween.prototype;\n        _proto3.render = function render(totalTime, suppressEvents, force) {\n            var prevTime = this._time, tDur = this._tDur, dur = this._dur, isNegative = totalTime < 0, tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime, time, pt, iteration, cycleDuration, prevIteration, isYoyo, ratio, timeline, yoyoEase;\n            if (!dur) {\n                _renderZeroDurationTween(this, totalTime, suppressEvents, force);\n            } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {\n                time = tTime;\n                timeline = this.timeline;\n                if (this._repeat) {\n                    cycleDuration = dur + this._rDelay;\n                    if (this._repeat < -1 && isNegative) {\n                        return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n                    }\n                    time = _roundPrecise(tTime % cycleDuration);\n                    if (tTime === tDur) {\n                        iteration = this._repeat;\n                        time = dur;\n                    } else {\n                        iteration = ~~(tTime / cycleDuration);\n                        if (iteration && iteration === tTime / cycleDuration) {\n                            time = dur;\n                            iteration--;\n                        }\n                        time > dur && (time = dur);\n                    }\n                    isYoyo = this._yoyo && iteration & 1;\n                    if (isYoyo) {\n                        yoyoEase = this._yEase;\n                        time = dur - time;\n                    }\n                    prevIteration = _animationCycle(this._tTime, cycleDuration);\n                    if (time === prevTime && !force && this._initted) {\n                        this._tTime = tTime;\n                        return this;\n                    }\n                    if (iteration !== prevIteration) {\n                        timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);\n                        if (this.vars.repeatRefresh && !isYoyo && !this._lock) {\n                            this._lock = force = 1;\n                            this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;\n                        }\n                    }\n                }\n                if (!this._initted) {\n                    if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents)) {\n                        this._tTime = 0;\n                        return this;\n                    }\n                    if (prevTime !== this._time) {\n                        return this;\n                    }\n                    if (dur !== this._dur) {\n                        return this.render(totalTime, suppressEvents, force);\n                    }\n                }\n                this._tTime = tTime;\n                this._time = time;\n                if (!this._act && this._ts) {\n                    this._act = 1;\n                    this._lazy = 0;\n                }\n                this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\n                if (this._from) {\n                    this.ratio = ratio = 1 - ratio;\n                }\n                if (time && !prevTime && !suppressEvents) {\n                    _callback(this, \"onStart\");\n                    if (this._tTime !== tTime) {\n                        return this;\n                    }\n                }\n                pt = this._pt;\n                while(pt){\n                    pt.r(ratio, pt.d);\n                    pt = pt._next;\n                }\n                timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);\n                if (this._onUpdate && !suppressEvents) {\n                    isNegative && _rewindStartAt(this, totalTime, suppressEvents, force);\n                    _callback(this, \"onUpdate\");\n                }\n                this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n                if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\n                    isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);\n                    (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n                    if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime)) {\n                        _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n                        this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n                    }\n                }\n            }\n            return this;\n        };\n        _proto3.targets = function targets() {\n            return this._targets;\n        };\n        _proto3.invalidate = function invalidate() {\n            this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0;\n            this._ptLookup = [];\n            this.timeline && this.timeline.invalidate();\n            return _Animation2.prototype.invalidate.call(this);\n        };\n        _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {\n            _tickerActive || _ticker.wake();\n            this._ts || this.play();\n            var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts), ratio;\n            this._initted || _initTween(this, time);\n            ratio = this._ease(time / this._dur);\n            if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {\n                return this.resetTo(property, value, start, startIsRelative);\n            }\n            _alignPlayhead(this, 0);\n            this.parent || _addLinkedListItem(this._dp, this, \"_first\", \"_last\", this._dp._sort ? \"_start\" : 0);\n            return this.render(0);\n        };\n        _proto3.kill = function kill(targets, vars) {\n            if (vars === void 0) {\n                vars = \"all\";\n            }\n            if (!targets && (!vars || vars === \"all\")) {\n                this._lazy = this._pt = 0;\n                return this.parent ? _interrupt(this) : this;\n            }\n            if (this.timeline) {\n                var tDur = this.timeline.totalDuration();\n                this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);\n                this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);\n                return this;\n            }\n            var parsedTargets = this._targets, killingTargets = targets ? toArray(targets) : parsedTargets, propTweenLookup = this._ptLookup, firstPT = this._pt, overwrittenProps, curLookup, curOverwriteProps, props, p, pt, i;\n            if ((!vars || vars === \"all\") && _arraysMatch(parsedTargets, killingTargets)) {\n                vars === \"all\" && (this._pt = 0);\n                return _interrupt(this);\n            }\n            overwrittenProps = this._op = this._op || [];\n            if (vars !== \"all\") {\n                if (_isString(vars)) {\n                    p = {};\n                    _forEachName(vars, function(name) {\n                        return p[name] = 1;\n                    });\n                    vars = p;\n                }\n                vars = _addAliasesToVars(parsedTargets, vars);\n            }\n            i = parsedTargets.length;\n            while(i--){\n                if (~killingTargets.indexOf(parsedTargets[i])) {\n                    curLookup = propTweenLookup[i];\n                    if (vars === \"all\") {\n                        overwrittenProps[i] = vars;\n                        props = curLookup;\n                        curOverwriteProps = {};\n                    } else {\n                        curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\n                        props = vars;\n                    }\n                    for(p in props){\n                        pt = curLookup && curLookup[p];\n                        if (pt) {\n                            if (!(\"kill\" in pt.d) || pt.d.kill(p) === true) {\n                                _removeLinkedListItem(this, pt, \"_pt\");\n                            }\n                            delete curLookup[p];\n                        }\n                        if (curOverwriteProps !== \"all\") {\n                            curOverwriteProps[p] = 1;\n                        }\n                    }\n                }\n            }\n            this._initted && !this._pt && firstPT && _interrupt(this);\n            return this;\n        };\n        Tween.to = function to(targets, vars) {\n            return new Tween(targets, vars, arguments[2]);\n        };\n        Tween.from = function from(targets, vars) {\n            return _createTweenType(1, arguments);\n        };\n        Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\n            return new Tween(callback, 0, {\n                immediateRender: false,\n                lazy: false,\n                overwrite: false,\n                delay: delay,\n                onComplete: callback,\n                onReverseComplete: callback,\n                onCompleteParams: params,\n                onReverseCompleteParams: params,\n                callbackScope: scope\n            });\n        };\n        Tween.fromTo = function fromTo(targets, fromVars, toVars) {\n            return _createTweenType(2, arguments);\n        };\n        Tween.set = function set(targets, vars) {\n            vars.duration = 0;\n            vars.repeatDelay || (vars.repeat = 0);\n            return new Tween(targets, vars);\n        };\n        Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n            return _globalTimeline.killTweensOf(targets, props, onlyActive);\n        };\n        return Tween;\n    }(Animation);\n    _setDefaults(Tween.prototype, {\n        _targets: [],\n        _lazy: 0,\n        _startAt: 0,\n        _op: 0,\n        _onInit: 0\n    });\n    _forEachName(\"staggerTo,staggerFrom,staggerFromTo\", function(name) {\n        Tween[name] = function() {\n            var tl = new Timeline(), params = _slice.call(arguments, 0);\n            params.splice(name === \"staggerFromTo\" ? 5 : 4, 0, 0);\n            return tl[name].apply(tl, params);\n        };\n    });\n    var _setterPlain = function _setterPlain(target, property, value) {\n        return target[property] = value;\n    }, _setterFunc = function _setterFunc(target, property, value) {\n        return target[property](value);\n    }, _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\n        return target[property](data.fp, value);\n    }, _setterAttribute = function _setterAttribute(target, property, value) {\n        return target.setAttribute(property, value);\n    }, _getSetter = function _getSetter(target, property) {\n        return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\n    }, _renderPlain = function _renderPlain(ratio, data) {\n        return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);\n    }, _renderBoolean = function _renderBoolean(ratio, data) {\n        return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\n    }, _renderComplexString = function _renderComplexString(ratio, data) {\n        var pt = data._pt, s = \"\";\n        if (!ratio && data.b) {\n            s = data.b;\n        } else if (ratio === 1 && data.e) {\n            s = data.e;\n        } else {\n            while(pt){\n                s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;\n                pt = pt._next;\n            }\n            s += data.c;\n        }\n        data.set(data.t, data.p, s, data);\n    }, _renderPropTweens = function _renderPropTweens(ratio, data) {\n        var pt = data._pt;\n        while(pt){\n            pt.r(ratio, pt.d);\n            pt = pt._next;\n        }\n    }, _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\n        var pt = this._pt, next;\n        while(pt){\n            next = pt._next;\n            pt.p === property && pt.modifier(modifier, tween, target);\n            pt = next;\n        }\n    }, _killPropTweensOf = function _killPropTweensOf(property) {\n        var pt = this._pt, hasNonDependentRemaining, next;\n        while(pt){\n            next = pt._next;\n            if (pt.p === property && !pt.op || pt.op === property) {\n                _removeLinkedListItem(this, pt, \"_pt\");\n            } else if (!pt.dep) {\n                hasNonDependentRemaining = 1;\n            }\n            pt = next;\n        }\n        return !hasNonDependentRemaining;\n    }, _setterWithModifier = function _setterWithModifier(target, property, value, data) {\n        data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\n    }, _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\n        var pt = parent._pt, next, pt2, first, last;\n        while(pt){\n            next = pt._next;\n            pt2 = first;\n            while(pt2 && pt2.pr > pt.pr){\n                pt2 = pt2._next;\n            }\n            if (pt._prev = pt2 ? pt2._prev : last) {\n                pt._prev._next = pt;\n            } else {\n                first = pt;\n            }\n            if (pt._next = pt2) {\n                pt2._prev = pt;\n            } else {\n                last = pt;\n            }\n            pt = next;\n        }\n        parent._pt = first;\n    };\n    var PropTween = function() {\n        function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\n            this.t = target;\n            this.s = start;\n            this.c = change;\n            this.p = prop;\n            this.r = renderer || _renderPlain;\n            this.d = data || this;\n            this.set = setter || _setterPlain;\n            this.pr = priority || 0;\n            this._next = next;\n            if (next) {\n                next._prev = this;\n            }\n        }\n        var _proto4 = PropTween.prototype;\n        _proto4.modifier = function modifier(func, tween, target) {\n            this.mSet = this.mSet || this.set;\n            this.set = _setterWithModifier;\n            this.m = func;\n            this.mt = target;\n            this.tween = tween;\n        };\n        return PropTween;\n    }();\n    _forEachName(_callbackNames + \"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger\", function(name) {\n        return _reservedProps[name] = 1;\n    });\n    _globals.TweenMax = _globals.TweenLite = Tween;\n    _globals.TimelineLite = _globals.TimelineMax = Timeline;\n    _globalTimeline = new Timeline({\n        sortChildren: false,\n        defaults: _defaults,\n        autoRemoveChildren: true,\n        id: \"root\",\n        smoothChildTiming: true\n    });\n    _config.stringFilter = _colorStringFilter;\n    var _media = [], _listeners = {}, _emptyArray = [], _lastMediaTime = 0, _dispatch = function _dispatch(type) {\n        return (_listeners[type] || _emptyArray).map(function(f) {\n            return f();\n        });\n    }, _onMediaChange = function _onMediaChange() {\n        var time = Date.now(), matches = [];\n        if (time - _lastMediaTime > 2) {\n            _dispatch(\"matchMediaInit\");\n            _media.forEach(function(c) {\n                var queries = c.queries, conditions = c.conditions, match, p, anyMatch, toggled;\n                for(p in queries){\n                    match = _win.matchMedia(queries[p]).matches;\n                    match && (anyMatch = 1);\n                    if (match !== conditions[p]) {\n                        conditions[p] = match;\n                        toggled = 1;\n                    }\n                }\n                if (toggled) {\n                    c.revert();\n                    anyMatch && matches.push(c);\n                }\n            });\n            _dispatch(\"matchMediaRevert\");\n            matches.forEach(function(c) {\n                return c.onMatch(c);\n            });\n            _lastMediaTime = time;\n            _dispatch(\"matchMedia\");\n        }\n    };\n    var Context = function() {\n        function Context(func, scope) {\n            this.selector = scope && selector(scope);\n            this.data = [];\n            this._r = [];\n            this.isReverted = false;\n            func && this.add(func);\n        }\n        var _proto5 = Context.prototype;\n        _proto5.add = function add(name, func, scope) {\n            if (_isFunction(name)) {\n                scope = func;\n                func = name;\n                name = _isFunction;\n            }\n            var self1 = this, f = function f() {\n                var prev = _context, prevSelector = self1.selector, result;\n                prev && prev !== self1 && prev.data.push(self1);\n                scope && (self1.selector = selector(scope));\n                _context = self1;\n                result = func.apply(self1, arguments);\n                _isFunction(result) && self1._r.push(result);\n                _context = prev;\n                self1.selector = prevSelector;\n                self1.isReverted = false;\n                return result;\n            };\n            self1.last = f;\n            return name === _isFunction ? f(self1) : name ? self1[name] = f : f;\n        };\n        _proto5.ignore = function ignore(func) {\n            var prev = _context;\n            _context = null;\n            func(this);\n            _context = prev;\n        };\n        _proto5.getTweens = function getTweens() {\n            var a = [];\n            this.data.forEach(function(e) {\n                return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && a.push(e);\n            });\n            return a;\n        };\n        _proto5.clear = function clear() {\n            this._r.length = this.data.length = 0;\n        };\n        _proto5.kill = function kill(revert, matchMedia) {\n            var _this4 = this;\n            if (revert) {\n                this.getTweens().map(function(t) {\n                    return {\n                        g: t.globalTime(0),\n                        t: t\n                    };\n                }).sort(function(a, b) {\n                    return b.g - a.g || -1;\n                }).forEach(function(o) {\n                    return o.t.revert(revert);\n                });\n                this.data.forEach(function(e) {\n                    return !(e instanceof Animation) && e.revert && e.revert(revert);\n                });\n                this._r.forEach(function(f) {\n                    return f(revert, _this4);\n                });\n                this.isReverted = true;\n            } else {\n                this.data.forEach(function(e) {\n                    return e.kill && e.kill();\n                });\n            }\n            this.clear();\n            if (matchMedia) {\n                var i = _media.indexOf(this);\n                !!~i && _media.splice(i, 1);\n            }\n        };\n        _proto5.revert = function revert(config) {\n            this.kill(config || {});\n        };\n        return Context;\n    }();\n    var MatchMedia = function() {\n        function MatchMedia(scope) {\n            this.contexts = [];\n            this.scope = scope;\n        }\n        var _proto6 = MatchMedia.prototype;\n        _proto6.add = function add(conditions, func, scope) {\n            _isObject(conditions) || (conditions = {\n                matches: conditions\n            });\n            var context = new Context(0, scope || this.scope), cond = context.conditions = {}, mq, p, active;\n            this.contexts.push(context);\n            func = context.add(\"onMatch\", func);\n            context.queries = conditions;\n            for(p in conditions){\n                if (p === \"all\") {\n                    active = 1;\n                } else {\n                    mq = _win.matchMedia(conditions[p]);\n                    if (mq) {\n                        _media.indexOf(context) < 0 && _media.push(context);\n                        (cond[p] = mq.matches) && (active = 1);\n                        mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener(\"change\", _onMediaChange);\n                    }\n                }\n            }\n            active && func(context);\n            return this;\n        };\n        _proto6.revert = function revert(config) {\n            this.kill(config || {});\n        };\n        _proto6.kill = function kill(revert) {\n            this.contexts.forEach(function(c) {\n                return c.kill(revert, true);\n            });\n        };\n        return MatchMedia;\n    }();\n    var _gsap = {\n        registerPlugin: function registerPlugin() {\n            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                args[_key2] = arguments[_key2];\n            }\n            args.forEach(function(config) {\n                return _createPlugin(config);\n            });\n        },\n        timeline: function timeline(vars) {\n            return new Timeline(vars);\n        },\n        getTweensOf: function getTweensOf(targets, onlyActive) {\n            return _globalTimeline.getTweensOf(targets, onlyActive);\n        },\n        getProperty: function getProperty(target, property, unit, uncache) {\n            _isString(target) && (target = toArray(target)[0]);\n            var getter = _getCache(target || {}).get, format = unit ? _passThrough : _numericIfPossible;\n            unit === \"native\" && (unit = \"\");\n            return !target ? target : !property ? function(property, unit, uncache) {\n                return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n            } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n        },\n        quickSetter: function quickSetter(target, property, unit) {\n            target = toArray(target);\n            if (target.length > 1) {\n                var setters = target.map(function(t) {\n                    return gsap.quickSetter(t, property, unit);\n                }), l = setters.length;\n                return function(value) {\n                    var i = l;\n                    while(i--){\n                        setters[i](value);\n                    }\n                };\n            }\n            target = target[0] || {};\n            var Plugin = _plugins[property], cache = _getCache(target), p = cache.harness && (cache.harness.aliases || {})[property] || property, setter = Plugin ? function(value) {\n                var p = new Plugin();\n                _quickTween._pt = 0;\n                p.init(target, unit ? value + unit : value, _quickTween, 0, [\n                    target\n                ]);\n                p.render(1, p);\n                _quickTween._pt && _renderPropTweens(1, _quickTween);\n            } : cache.set(target, p);\n            return Plugin ? setter : function(value) {\n                return setter(target, p, unit ? value + unit : value, cache, 1);\n            };\n        },\n        quickTo: function quickTo(target, property, vars) {\n            var _merge2;\n            var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = \"+=0.1\", _merge2.paused = true, _merge2), vars || {})), func = function func(value, start, startIsRelative) {\n                return tween.resetTo(property, value, start, startIsRelative);\n            };\n            func.tween = tween;\n            return func;\n        },\n        isTweening: function isTweening(targets) {\n            return _globalTimeline.getTweensOf(targets, true).length > 0;\n        },\n        defaults: function defaults(value) {\n            value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\n            return _mergeDeep(_defaults, value || {});\n        },\n        config: function config(value) {\n            return _mergeDeep(_config, value || {});\n        },\n        registerEffect: function registerEffect(_ref3) {\n            var name = _ref3.name, effect = _ref3.effect, plugins = _ref3.plugins, defaults = _ref3.defaults, extendTimeline = _ref3.extendTimeline;\n            (plugins || \"\").split(\",\").forEach(function(pluginName) {\n                return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + \" effect requires \" + pluginName + \" plugin.\");\n            });\n            _effects[name] = function(targets, vars, tl) {\n                return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\n            };\n            if (extendTimeline) {\n                Timeline.prototype[name] = function(targets, vars, position) {\n                    return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\n                };\n            }\n        },\n        registerEase: function registerEase(name, ease) {\n            _easeMap[name] = _parseEase(ease);\n        },\n        parseEase: function parseEase(ease, defaultEase) {\n            return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\n        },\n        getById: function getById(id) {\n            return _globalTimeline.getById(id);\n        },\n        exportRoot: function exportRoot(vars, includeDelayedCalls) {\n            if (vars === void 0) {\n                vars = {};\n            }\n            var tl = new Timeline(vars), child, next;\n            tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\n            _globalTimeline.remove(tl);\n            tl._dp = 0;\n            tl._time = tl._tTime = _globalTimeline._time;\n            child = _globalTimeline._first;\n            while(child){\n                next = child._next;\n                if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\n                    _addToTimeline(tl, child, child._start - child._delay);\n                }\n                child = next;\n            }\n            _addToTimeline(_globalTimeline, tl, 0);\n            return tl;\n        },\n        context: function context(func, scope) {\n            return func ? new Context(func, scope) : _context;\n        },\n        matchMedia: function matchMedia(scope) {\n            return new MatchMedia(scope);\n        },\n        matchMediaRefresh: function matchMediaRefresh() {\n            return _media.forEach(function(c) {\n                var cond = c.conditions, found, p;\n                for(p in cond){\n                    if (cond[p]) {\n                        cond[p] = false;\n                        found = 1;\n                    }\n                }\n                found && c.revert();\n            }) || _onMediaChange();\n        },\n        addEventListener: function addEventListener(type, callback) {\n            var a = _listeners[type] || (_listeners[type] = []);\n            ~a.indexOf(callback) || a.push(callback);\n        },\n        removeEventListener: function removeEventListener(type, callback) {\n            var a = _listeners[type], i = a && a.indexOf(callback);\n            i >= 0 && a.splice(i, 1);\n        },\n        utils: {\n            wrap: wrap,\n            wrapYoyo: wrapYoyo,\n            distribute: distribute,\n            random: random,\n            snap: snap,\n            normalize: normalize,\n            getUnit: getUnit,\n            clamp: clamp,\n            splitColor: splitColor,\n            toArray: toArray,\n            selector: selector,\n            mapRange: mapRange,\n            pipe: pipe,\n            unitize: unitize,\n            interpolate: interpolate,\n            shuffle: shuffle\n        },\n        install: _install,\n        effects: _effects,\n        ticker: _ticker,\n        updateRoot: Timeline.updateRoot,\n        plugins: _plugins,\n        globalTimeline: _globalTimeline,\n        core: {\n            PropTween: PropTween,\n            globals: _addGlobal,\n            Tween: Tween,\n            Timeline: Timeline,\n            Animation: Animation,\n            getCache: _getCache,\n            _removeLinkedListItem: _removeLinkedListItem,\n            reverting: function reverting() {\n                return _reverting;\n            },\n            context: function context(toAdd) {\n                if (toAdd && _context) {\n                    _context.data.push(toAdd);\n                    toAdd._ctx = _context;\n                }\n                return _context;\n            },\n            suppressOverwrites: function suppressOverwrites(value) {\n                return _suppressOverwrites = value;\n            }\n        }\n    };\n    _forEachName(\"to,from,fromTo,delayedCall,set,killTweensOf\", function(name) {\n        return _gsap[name] = Tween[name];\n    });\n    _ticker.add(Timeline.updateRoot);\n    _quickTween = _gsap.to({}, {\n        duration: 0\n    });\n    var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\n        var pt = plugin._pt;\n        while(pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop){\n            pt = pt._next;\n        }\n        return pt;\n    }, _addModifiers = function _addModifiers(tween, modifiers) {\n        var targets = tween._targets, p, i, pt;\n        for(p in modifiers){\n            i = targets.length;\n            while(i--){\n                pt = tween._ptLookup[i][p];\n                if (pt && (pt = pt.d)) {\n                    if (pt._pt) {\n                        pt = _getPluginPropTween(pt, p);\n                    }\n                    pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\n                }\n            }\n        }\n    }, _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\n        return {\n            name: name,\n            rawVars: 1,\n            init: function init(target, vars, tween) {\n                tween._onInit = function(tween) {\n                    var temp, p;\n                    if (_isString(vars)) {\n                        temp = {};\n                        _forEachName(vars, function(name) {\n                            return temp[name] = 1;\n                        });\n                        vars = temp;\n                    }\n                    if (modifier) {\n                        temp = {};\n                        for(p in vars){\n                            temp[p] = modifier(vars[p]);\n                        }\n                        vars = temp;\n                    }\n                    _addModifiers(tween, vars);\n                };\n            }\n        };\n    };\n    var gsap = _gsap.registerPlugin({\n        name: \"attr\",\n        init: function init(target, vars, tween, index, targets) {\n            var p, pt, v;\n            this.tween = tween;\n            for(p in vars){\n                v = target.getAttribute(p) || \"\";\n                pt = this.add(target, \"setAttribute\", (v || 0) + \"\", vars[p], index, targets, 0, 0, p);\n                pt.op = p;\n                pt.b = v;\n                this._props.push(p);\n            }\n        },\n        render: function render(ratio, data) {\n            var pt = data._pt;\n            while(pt){\n                _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d);\n                pt = pt._next;\n            }\n        }\n    }, {\n        name: \"endArray\",\n        init: function init(target, value) {\n            var i = value.length;\n            while(i--){\n                this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);\n            }\n        }\n    }, _buildModifierPlugin(\"roundProps\", _roundModifier), _buildModifierPlugin(\"modifiers\"), _buildModifierPlugin(\"snap\", snap)) || _gsap;\n    Tween.version = Timeline.version = gsap.version = \"3.11.1\";\n    _coreReady = 1;\n    _windowExists() && _wake();\n    var Power0 = _easeMap.Power0, Power1 = _easeMap.Power1, Power2 = _easeMap.Power2, Power3 = _easeMap.Power3, Power4 = _easeMap.Power4, Linear = _easeMap.Linear, Quad = _easeMap.Quad, Cubic = _easeMap.Cubic, Quart = _easeMap.Quart, Quint = _easeMap.Quint, Strong = _easeMap.Strong, Elastic = _easeMap.Elastic, Back = _easeMap.Back, SteppedEase = _easeMap.SteppedEase, Bounce = _easeMap.Bounce, Sine = _easeMap.Sine, Expo = _easeMap.Expo, Circ = _easeMap.Circ;\n    var _win$1, _doc$1, _docElement, _pluginInitted, _tempDiv, _tempDivStyler, _recentSetterPlugin, _reverting$1, _windowExists$1 = function _windowExists() {\n        return \"undefined\" !== \"undefined\";\n    }, _transformProps = {}, _RAD2DEG = 180 / Math.PI, _DEG2RAD = Math.PI / 180, _atan2 = Math.atan2, _bigNum$1 = 1e8, _capsExp = /([A-Z])/g, _horizontalExp = /(left|right|width|margin|padding|x)/i, _complexExp = /[\\s,\\(]\\S/, _propertyAliases = {\n        autoAlpha: \"opacity,visibility\",\n        scale: \"scaleX,scaleY\",\n        alpha: \"opacity\"\n    }, _renderCSSProp = function _renderCSSProp(ratio, data) {\n        return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n    }, _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n        return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n    }, _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n        return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n    }, _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n        var value = data.s + data.c * ratio;\n        data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n    }, _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n        return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n    }, _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n        return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n    }, _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n        return target.style[property] = value;\n    }, _setterCSSProp = function _setterCSSProp(target, property, value) {\n        return target.style.setProperty(property, value);\n    }, _setterTransform = function _setterTransform(target, property, value) {\n        return target._gsap[property] = value;\n    }, _setterScale = function _setterScale(target, property, value) {\n        return target._gsap.scaleX = target._gsap.scaleY = value;\n    }, _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n        var cache = target._gsap;\n        cache.scaleX = cache.scaleY = value;\n        cache.renderTransform(ratio, cache);\n    }, _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n        var cache = target._gsap;\n        cache[property] = value;\n        cache.renderTransform(ratio, cache);\n    }, _transformProp = \"transform\", _transformOriginProp = _transformProp + \"Origin\", _saveStyle = function _saveStyle(property) {\n        var _this = this;\n        var target = this.target, style = target.style;\n        if (property in _transformProps) {\n            this.tfm = this.tfm || {};\n            if (property !== \"transform\") {\n                property = _propertyAliases[property] || property;\n                ~property.indexOf(\",\") ? property.split(\",\").forEach(function(a) {\n                    return _this.tfm[a] = _get(target, a);\n                }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property);\n            }\n            if (this.props.indexOf(_transformProp) >= 0) {\n                return;\n            }\n            if (target._gsap.svg) {\n                this.svgo = target.getAttribute(\"data-svg-origin\");\n                this.props.push(_transformOriginProp, \"\");\n            }\n            property = _transformProp;\n        }\n        style && this.props.push(property, style[property]);\n    }, _removeIndependentTransforms = function _removeIndependentTransforms(style) {\n        if (style.translate) {\n            style.removeProperty(\"translate\");\n            style.removeProperty(\"scale\");\n            style.removeProperty(\"rotate\");\n        }\n    }, _revertStyle = function _revertStyle() {\n        var props = this.props, target = this.target, style = target.style, cache = target._gsap, i, p;\n        for(i = 0; i < props.length; i += 2){\n            props[i + 1] ? style[props[i]] = props[i + 1] : style.removeProperty(props[i].replace(_capsExp, \"-$1\").toLowerCase());\n        }\n        if (this.tfm) {\n            for(p in this.tfm){\n                cache[p] = this.tfm[p];\n            }\n            if (cache.svg) {\n                cache.renderTransform();\n                target.setAttribute(\"data-svg-origin\", this.svgo || \"\");\n            }\n            i = _reverting$1();\n            if (i && !i.isStart && !style[_transformProp]) {\n                _removeIndependentTransforms(style);\n                cache.uncache = 1;\n            }\n        }\n    }, _getStyleSaver = function _getStyleSaver(target, properties) {\n        var saver = {\n            target: target,\n            props: [],\n            revert: _revertStyle,\n            save: _saveStyle\n        };\n        properties && properties.split(\",\").forEach(function(p) {\n            return saver.save(p);\n        });\n        return saver;\n    }, _supports3D, _createElement = function _createElement(type, ns) {\n        var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc$1.createElement(type);\n        return e.style ? e : _doc$1.createElement(type);\n    }, _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n        var cs = getComputedStyle(target);\n        return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\";\n    }, _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"), _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n        var e = element || _tempDiv, s = e.style, i = 5;\n        if (property in s && !preferPrefix) {\n            return property;\n        }\n        property = property.charAt(0).toUpperCase() + property.substr(1);\n        while(i-- && !(_prefixes[i] + property in s)){}\n        return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n    }, _initCore = function _initCore() {\n        if (_windowExists$1() && window.document) {\n            _win$1 = window;\n            _doc$1 = _win$1.document;\n            _docElement = _doc$1.documentElement;\n            _tempDiv = _createElement(\"div\") || {\n                style: {}\n            };\n            _tempDivStyler = _createElement(\"div\");\n            _transformProp = _checkPropPrefix(_transformProp);\n            _transformOriginProp = _transformProp + \"Origin\";\n            _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\";\n            _supports3D = !!_checkPropPrefix(\"perspective\");\n            _reverting$1 = gsap.core.reverting;\n            _pluginInitted = 1;\n        }\n    }, _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n        var svg = _createElement(\"svg\", this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"), oldParent = this.parentNode, oldSibling = this.nextSibling, oldCSS = this.style.cssText, bbox;\n        _docElement.appendChild(svg);\n        svg.appendChild(this);\n        this.style.display = \"block\";\n        if (swapIfPossible) {\n            try {\n                bbox = this.getBBox();\n                this._gsapBBox = this.getBBox;\n                this.getBBox = _getBBoxHack;\n            } catch (e) {}\n        } else if (this._gsapBBox) {\n            bbox = this._gsapBBox();\n        }\n        if (oldParent) {\n            if (oldSibling) {\n                oldParent.insertBefore(this, oldSibling);\n            } else {\n                oldParent.appendChild(this);\n            }\n        }\n        _docElement.removeChild(svg);\n        this.style.cssText = oldCSS;\n        return bbox;\n    }, _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n        var i = attributesArray.length;\n        while(i--){\n            if (target.hasAttribute(attributesArray[i])) {\n                return target.getAttribute(attributesArray[i]);\n            }\n        }\n    }, _getBBox = function _getBBox(target) {\n        var bounds;\n        try {\n            bounds = target.getBBox();\n        } catch (error) {\n            bounds = _getBBoxHack.call(target, true);\n        }\n        bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));\n        return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n            x: +_getAttributeFallbacks(target, [\n                \"x\",\n                \"cx\",\n                \"x1\"\n            ]) || 0,\n            y: +_getAttributeFallbacks(target, [\n                \"y\",\n                \"cy\",\n                \"y1\"\n            ]) || 0,\n            width: 0,\n            height: 0\n        } : bounds;\n    }, _isSVG = function _isSVG(e) {\n        return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n    }, _removeProperty = function _removeProperty(target, property) {\n        if (property) {\n            var style = target.style;\n            if (property in _transformProps && property !== _transformOriginProp) {\n                property = _transformProp;\n            }\n            if (style.removeProperty) {\n                if (property.substr(0, 2) === \"ms\" || property.substr(0, 6) === \"webkit\") {\n                    property = \"-\" + property;\n                }\n                style.removeProperty(property.replace(_capsExp, \"-$1\").toLowerCase());\n            } else {\n                style.removeAttribute(property);\n            }\n        }\n    }, _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n        var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n        plugin._pt = pt;\n        pt.b = beginning;\n        pt.e = end;\n        plugin._props.push(property);\n        return pt;\n    }, _nonConvertibleUnits = {\n        deg: 1,\n        rad: 1,\n        turn: 1\n    }, _nonStandardLayouts = {\n        grid: 1,\n        flex: 1\n    }, _convertToUnit = function _convertToUnit(target, property, value, unit) {\n        var curValue = parseFloat(value) || 0, curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\", style = _tempDiv.style, horizontal = _horizontalExp.test(property), isRootSVG = target.tagName.toLowerCase() === \"svg\", measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"), amount = 100, toPixels = unit === \"px\", toPercent = unit === \"%\", px, parent, cache, isSVG;\n        if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n            return curValue;\n        }\n        curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n        isSVG = target.getCTM && _isSVG(target);\n        if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n            px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n            return _round(toPercent ? curValue / px * amount : curValue / 100 * px);\n        }\n        style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n        parent = ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n        if (isSVG) {\n            parent = (target.ownerSVGElement || {}).parentNode;\n        }\n        if (!parent || parent === _doc$1 || !parent.appendChild) {\n            parent = _doc$1.body;\n        }\n        cache = parent._gsap;\n        if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {\n            return _round(curValue / cache.width * amount);\n        } else {\n            (toPercent || curUnit === \"%\") && !_nonStandardLayouts[_getComputedProperty(parent, \"display\")] && (style.position = _getComputedProperty(target, \"position\"));\n            parent === target && (style.position = \"static\");\n            parent.appendChild(_tempDiv);\n            px = _tempDiv[measureProperty];\n            parent.removeChild(_tempDiv);\n            style.position = \"absolute\";\n            if (horizontal && toPercent) {\n                cache = _getCache(parent);\n                cache.time = _ticker.time;\n                cache.width = parent[measureProperty];\n            }\n        }\n        return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n    }, _get = function _get(target, property, unit, uncache) {\n        var value;\n        _pluginInitted || _initCore();\n        if (property in _propertyAliases && property !== \"transform\") {\n            property = _propertyAliases[property];\n            if (~property.indexOf(\",\")) {\n                property = property.split(\",\")[0];\n            }\n        }\n        if (_transformProps[property] && property !== \"transform\") {\n            value = _parseTransform(target, uncache);\n            value = property !== \"transformOrigin\" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n        } else {\n            value = target.style[property];\n            if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n                value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === \"opacity\" ? 1 : 0);\n            }\n        }\n        return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n    }, _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n        if (!start || start === \"none\") {\n            var p = _checkPropPrefix(prop, target, 1), s = p && _getComputedProperty(target, p, 1);\n            if (s && s !== start) {\n                prop = p;\n                start = s;\n            } else if (prop === \"borderColor\") {\n                start = _getComputedProperty(target, \"borderTopColor\");\n            }\n        }\n        var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString), index = 0, matchIndex = 0, a, result, startValues, startNum, color, startValue, endValue, endNum, chunk, endUnit, startUnit, endValues;\n        pt.b = start;\n        pt.e = end;\n        start += \"\";\n        end += \"\";\n        if (end === \"auto\") {\n            target.style[prop] = end;\n            end = _getComputedProperty(target, prop) || end;\n            target.style[prop] = start;\n        }\n        a = [\n            start,\n            end\n        ];\n        _colorStringFilter(a);\n        start = a[0];\n        end = a[1];\n        startValues = start.match(_numWithUnitExp) || [];\n        endValues = end.match(_numWithUnitExp) || [];\n        if (endValues.length) {\n            while(result = _numWithUnitExp.exec(end)){\n                endValue = result[0];\n                chunk = end.substring(index, result.index);\n                if (color) {\n                    color = (color + 1) % 5;\n                } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n                    color = 1;\n                }\n                if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n                    startNum = parseFloat(startValue) || 0;\n                    startUnit = startValue.substr((startNum + \"\").length);\n                    endValue.charAt(1) === \"=\" && (endValue = _parseRelative(startNum, endValue) + startUnit);\n                    endNum = parseFloat(endValue);\n                    endUnit = endValue.substr((endNum + \"\").length);\n                    index = _numWithUnitExp.lastIndex - endUnit.length;\n                    if (!endUnit) {\n                        endUnit = endUnit || _config.units[prop] || startUnit;\n                        if (index === end.length) {\n                            end += endUnit;\n                            pt.e += endUnit;\n                        }\n                    }\n                    if (startUnit !== endUnit) {\n                        startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n                    }\n                    pt._pt = {\n                        _next: pt._pt,\n                        p: chunk || matchIndex === 1 ? chunk : \",\",\n                        s: startNum,\n                        c: endNum - startNum,\n                        m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n                    };\n                }\n            }\n            pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n        } else {\n            pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n        }\n        _relExp.test(end) && (pt.e = 0);\n        this._pt = pt;\n        return pt;\n    }, _keywordToPercent = {\n        top: \"0%\",\n        bottom: \"100%\",\n        left: \"0%\",\n        right: \"100%\",\n        center: \"50%\"\n    }, _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n        var split = value.split(\" \"), x = split[0], y = split[1] || \"50%\";\n        if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n            value = x;\n            x = y;\n            y = value;\n        }\n        split[0] = _keywordToPercent[x] || x;\n        split[1] = _keywordToPercent[y] || y;\n        return split.join(\" \");\n    }, _renderClearProps = function _renderClearProps(ratio, data) {\n        if (data.tween && data.tween._time === data.tween._dur) {\n            var target = data.t, style = target.style, props = data.u, cache = target._gsap, prop, clearTransforms, i;\n            if (props === \"all\" || props === true) {\n                style.cssText = \"\";\n                clearTransforms = 1;\n            } else {\n                props = props.split(\",\");\n                i = props.length;\n                while(--i > -1){\n                    prop = props[i];\n                    if (_transformProps[prop]) {\n                        clearTransforms = 1;\n                        prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n                    }\n                    _removeProperty(target, prop);\n                }\n            }\n            if (clearTransforms) {\n                _removeProperty(target, _transformProp);\n                if (cache) {\n                    cache.svg && target.removeAttribute(\"transform\");\n                    _parseTransform(target, 1);\n                    cache.uncache = 1;\n                    _removeIndependentTransforms(style);\n                }\n            }\n        }\n    }, _specialProps = {\n        clearProps: function clearProps(plugin, target, property, endValue, tween) {\n            if (tween.data !== \"isFromStart\") {\n                var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n                pt.u = endValue;\n                pt.pr = -10;\n                pt.tween = tween;\n                plugin._props.push(property);\n                return 1;\n            }\n        }\n    }, _identity2DMatrix = [\n        1,\n        0,\n        0,\n        1,\n        0,\n        0\n    ], _rotationalProperties = {}, _isNullTransform = function _isNullTransform(value) {\n        return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n    }, _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n        var matrixString = _getComputedProperty(target, _transformProp);\n        return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);\n    }, _getMatrix = function _getMatrix(target, force2D) {\n        var cache = target._gsap || _getCache(target), style = target.style, matrix = _getComputedTransformMatrixAsArray(target), parent, nextSibling, temp, addedToDOM;\n        if (cache.svg && target.getAttribute(\"transform\")) {\n            temp = target.transform.baseVal.consolidate().matrix;\n            matrix = [\n                temp.a,\n                temp.b,\n                temp.c,\n                temp.d,\n                temp.e,\n                temp.f\n            ];\n            return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n        } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n            temp = style.display;\n            style.display = \"block\";\n            parent = target.parentNode;\n            if (!parent || !target.offsetParent) {\n                addedToDOM = 1;\n                nextSibling = target.nextElementSibling;\n                _docElement.appendChild(target);\n            }\n            matrix = _getComputedTransformMatrixAsArray(target);\n            temp ? style.display = temp : _removeProperty(target, \"display\");\n            if (addedToDOM) {\n                nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n            }\n        }\n        return force2D && matrix.length > 6 ? [\n            matrix[0],\n            matrix[1],\n            matrix[4],\n            matrix[5],\n            matrix[12],\n            matrix[13]\n        ] : matrix;\n    }, _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n        var cache = target._gsap, matrix = matrixArray || _getMatrix(target, true), xOriginOld = cache.xOrigin || 0, yOriginOld = cache.yOrigin || 0, xOffsetOld = cache.xOffset || 0, yOffsetOld = cache.yOffset || 0, a = matrix[0], b = matrix[1], c = matrix[2], d = matrix[3], tx = matrix[4], ty = matrix[5], originSplit = origin.split(\" \"), xOrigin = parseFloat(originSplit[0]) || 0, yOrigin = parseFloat(originSplit[1]) || 0, bounds, determinant, x, y;\n        if (!originIsAbsolute) {\n            bounds = _getBBox(target);\n            xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n            yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin);\n        } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n            x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n            y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n            xOrigin = x;\n            yOrigin = y;\n        }\n        if (smooth || smooth !== false && cache.smooth) {\n            tx = xOrigin - xOriginOld;\n            ty = yOrigin - yOriginOld;\n            cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n            cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n        } else {\n            cache.xOffset = cache.yOffset = 0;\n        }\n        cache.xOrigin = xOrigin;\n        cache.yOrigin = yOrigin;\n        cache.smooth = !!smooth;\n        cache.origin = origin;\n        cache.originIsAbsolute = !!originIsAbsolute;\n        target.style[_transformOriginProp] = \"0px 0px\";\n        if (pluginToAddPropTweensTo) {\n            _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n            _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n            _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n            _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n        }\n        target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n    }, _parseTransform = function _parseTransform(target, uncache) {\n        var cache = target._gsap || new GSCache(target);\n        if (\"x\" in cache && !uncache && !cache.uncache) {\n            return cache;\n        }\n        var style = target.style, invertedScaleX = cache.scaleX < 0, px = \"px\", deg = \"deg\", cs = getComputedStyle(target), origin = _getComputedProperty(target, _transformOriginProp) || \"0\", x, y, z, scaleX, scaleY, rotation, rotationX, rotationY, skewX, skewY, perspective, xOrigin, yOrigin, matrix, angle, cos, sin, a, b, c, d, a12, a22, t1, t2, t3, a13, a23, a33, a42, a43, a32;\n        x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n        scaleX = scaleY = 1;\n        cache.svg = !!(target.getCTM && _isSVG(target));\n        if (cs.translate) {\n            if (cs.translate !== \"none\" || cs.scale !== \"none\" || cs.rotate !== \"none\") {\n                style[_transformProp] = (cs.translate !== \"none\" ? \"translate3d(\" + (cs.translate + \" 0 0\").split(\" \").slice(0, 3).join(\", \") + \") \" : \"\") + (cs.rotate !== \"none\" ? \"rotate(\" + cs.rotate + \") \" : \"\") + (cs.scale !== \"none\" ? \"scale(\" + cs.scale.split(\" \").join(\",\") + \") \" : \"\") + cs[_transformProp];\n            }\n            style.scale = style.rotate = style.translate = \"none\";\n        }\n        matrix = _getMatrix(target, cache.svg);\n        if (cache.svg) {\n            if (cache.uncache) {\n                t2 = target.getBBox();\n                origin = cache.xOrigin - t2.x + \"px \" + (cache.yOrigin - t2.y) + \"px\";\n                t1 = \"\";\n            } else {\n                t1 = !uncache && target.getAttribute(\"data-svg-origin\");\n            }\n            _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n        }\n        xOrigin = cache.xOrigin || 0;\n        yOrigin = cache.yOrigin || 0;\n        if (matrix !== _identity2DMatrix) {\n            a = matrix[0];\n            b = matrix[1];\n            c = matrix[2];\n            d = matrix[3];\n            x = a12 = matrix[4];\n            y = a22 = matrix[5];\n            if (matrix.length === 6) {\n                scaleX = Math.sqrt(a * a + b * b);\n                scaleY = Math.sqrt(d * d + c * c);\n                rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;\n                skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n                skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\n                if (cache.svg) {\n                    x -= xOrigin - (xOrigin * a + yOrigin * c);\n                    y -= yOrigin - (xOrigin * b + yOrigin * d);\n                }\n            } else {\n                a32 = matrix[6];\n                a42 = matrix[7];\n                a13 = matrix[8];\n                a23 = matrix[9];\n                a33 = matrix[10];\n                a43 = matrix[11];\n                x = matrix[12];\n                y = matrix[13];\n                z = matrix[14];\n                angle = _atan2(a32, a33);\n                rotationX = angle * _RAD2DEG;\n                if (angle) {\n                    cos = Math.cos(-angle);\n                    sin = Math.sin(-angle);\n                    t1 = a12 * cos + a13 * sin;\n                    t2 = a22 * cos + a23 * sin;\n                    t3 = a32 * cos + a33 * sin;\n                    a13 = a12 * -sin + a13 * cos;\n                    a23 = a22 * -sin + a23 * cos;\n                    a33 = a32 * -sin + a33 * cos;\n                    a43 = a42 * -sin + a43 * cos;\n                    a12 = t1;\n                    a22 = t2;\n                    a32 = t3;\n                }\n                angle = _atan2(-c, a33);\n                rotationY = angle * _RAD2DEG;\n                if (angle) {\n                    cos = Math.cos(-angle);\n                    sin = Math.sin(-angle);\n                    t1 = a * cos - a13 * sin;\n                    t2 = b * cos - a23 * sin;\n                    t3 = c * cos - a33 * sin;\n                    a43 = d * sin + a43 * cos;\n                    a = t1;\n                    b = t2;\n                    c = t3;\n                }\n                angle = _atan2(b, a);\n                rotation = angle * _RAD2DEG;\n                if (angle) {\n                    cos = Math.cos(angle);\n                    sin = Math.sin(angle);\n                    t1 = a * cos + b * sin;\n                    t2 = a12 * cos + a22 * sin;\n                    b = b * cos - a * sin;\n                    a22 = a22 * cos - a12 * sin;\n                    a = t1;\n                    a12 = t2;\n                }\n                if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n                    rotationX = rotation = 0;\n                    rotationY = 180 - rotationY;\n                }\n                scaleX = _round(Math.sqrt(a * a + b * b + c * c));\n                scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));\n                angle = _atan2(a12, a22);\n                skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n                perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n            }\n            if (cache.svg) {\n                t1 = target.getAttribute(\"transform\");\n                cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n                t1 && target.setAttribute(\"transform\", t1);\n            }\n        }\n        if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n            if (invertedScaleX) {\n                scaleX *= -1;\n                skewX += rotation <= 0 ? 180 : -180;\n                rotation += rotation <= 0 ? 180 : -180;\n            } else {\n                scaleY *= -1;\n                skewX += skewX <= 0 ? 180 : -180;\n            }\n        }\n        uncache = uncache || cache.uncache;\n        cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n        cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n        cache.z = z + px;\n        cache.scaleX = _round(scaleX);\n        cache.scaleY = _round(scaleY);\n        cache.rotation = _round(rotation) + deg;\n        cache.rotationX = _round(rotationX) + deg;\n        cache.rotationY = _round(rotationY) + deg;\n        cache.skewX = skewX + deg;\n        cache.skewY = skewY + deg;\n        cache.transformPerspective = perspective + px;\n        if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || 0) {\n            style[_transformOriginProp] = _firstTwoOnly(origin);\n        }\n        cache.xOffset = cache.yOffset = 0;\n        cache.force3D = _config.force3D;\n        cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n        cache.uncache = 0;\n        return cache;\n    }, _firstTwoOnly = function _firstTwoOnly(value) {\n        return (value = value.split(\" \"))[0] + \" \" + value[1];\n    }, _addPxTranslate = function _addPxTranslate(target, start, value) {\n        var unit = getUnit(start);\n        return _round(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n    }, _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n        cache.z = \"0px\";\n        cache.rotationY = cache.rotationX = \"0deg\";\n        cache.force3D = 0;\n        _renderCSSTransforms(ratio, cache);\n    }, _zeroDeg = \"0deg\", _zeroPx = \"0px\", _endParenthesis = \") \", _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n        var _ref = cache || this, xPercent = _ref.xPercent, yPercent = _ref.yPercent, x = _ref.x, y = _ref.y, z = _ref.z, rotation = _ref.rotation, rotationY = _ref.rotationY, rotationX = _ref.rotationX, skewX = _ref.skewX, skewY = _ref.skewY, scaleX = _ref.scaleX, scaleY = _ref.scaleY, transformPerspective = _ref.transformPerspective, force3D = _ref.force3D, target = _ref.target, zOrigin = _ref.zOrigin, transforms = \"\", use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true;\n        if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n            var angle = parseFloat(rotationY) * _DEG2RAD, a13 = Math.sin(angle), a33 = Math.cos(angle), cos;\n            angle = parseFloat(rotationX) * _DEG2RAD;\n            cos = Math.cos(angle);\n            x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n            y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n            z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n        }\n        if (transformPerspective !== _zeroPx) {\n            transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n        }\n        if (xPercent || yPercent) {\n            transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n        }\n        if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n            transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n        }\n        if (rotation !== _zeroDeg) {\n            transforms += \"rotate(\" + rotation + _endParenthesis;\n        }\n        if (rotationY !== _zeroDeg) {\n            transforms += \"rotateY(\" + rotationY + _endParenthesis;\n        }\n        if (rotationX !== _zeroDeg) {\n            transforms += \"rotateX(\" + rotationX + _endParenthesis;\n        }\n        if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n            transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n        }\n        if (scaleX !== 1 || scaleY !== 1) {\n            transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n        }\n        target.style[_transformProp] = transforms || \"translate(0, 0)\";\n    }, _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n        var _ref2 = cache || this, xPercent = _ref2.xPercent, yPercent = _ref2.yPercent, x = _ref2.x, y = _ref2.y, rotation = _ref2.rotation, skewX = _ref2.skewX, skewY = _ref2.skewY, scaleX = _ref2.scaleX, scaleY = _ref2.scaleY, target = _ref2.target, xOrigin = _ref2.xOrigin, yOrigin = _ref2.yOrigin, xOffset = _ref2.xOffset, yOffset = _ref2.yOffset, forceCSS = _ref2.forceCSS, tx = parseFloat(x), ty = parseFloat(y), a11, a21, a12, a22, temp;\n        rotation = parseFloat(rotation);\n        skewX = parseFloat(skewX);\n        skewY = parseFloat(skewY);\n        if (skewY) {\n            skewY = parseFloat(skewY);\n            skewX += skewY;\n            rotation += skewY;\n        }\n        if (rotation || skewX) {\n            rotation *= _DEG2RAD;\n            skewX *= _DEG2RAD;\n            a11 = Math.cos(rotation) * scaleX;\n            a21 = Math.sin(rotation) * scaleX;\n            a12 = Math.sin(rotation - skewX) * -scaleY;\n            a22 = Math.cos(rotation - skewX) * scaleY;\n            if (skewX) {\n                skewY *= _DEG2RAD;\n                temp = Math.tan(skewX - skewY);\n                temp = Math.sqrt(1 + temp * temp);\n                a12 *= temp;\n                a22 *= temp;\n                if (skewY) {\n                    temp = Math.tan(skewY);\n                    temp = Math.sqrt(1 + temp * temp);\n                    a11 *= temp;\n                    a21 *= temp;\n                }\n            }\n            a11 = _round(a11);\n            a21 = _round(a21);\n            a12 = _round(a12);\n            a22 = _round(a22);\n        } else {\n            a11 = scaleX;\n            a22 = scaleY;\n            a21 = a12 = 0;\n        }\n        if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n            tx = _convertToUnit(target, \"x\", x, \"px\");\n            ty = _convertToUnit(target, \"y\", y, \"px\");\n        }\n        if (xOrigin || yOrigin || xOffset || yOffset) {\n            tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n            ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n        }\n        if (xPercent || yPercent) {\n            temp = target.getBBox();\n            tx = _round(tx + xPercent / 100 * temp.width);\n            ty = _round(ty + yPercent / 100 * temp.height);\n        }\n        temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n        target.setAttribute(\"transform\", temp);\n        forceCSS && (target.style[_transformProp] = temp);\n    }, _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {\n        var cap = 360, isString = _isString(endValue), endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1), change = endNum - startNum, finalValue = startNum + change + \"deg\", direction, pt;\n        if (isString) {\n            direction = endValue.split(\"_\")[1];\n            if (direction === \"short\") {\n                change %= cap;\n                if (change !== change % (cap / 2)) {\n                    change += change < 0 ? cap : -cap;\n                }\n            }\n            if (direction === \"cw\" && change < 0) {\n                change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n            } else if (direction === \"ccw\" && change > 0) {\n                change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n            }\n        }\n        plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n        pt.e = finalValue;\n        pt.u = \"deg\";\n        plugin._props.push(property);\n        return pt;\n    }, _assign = function _assign(target, source) {\n        for(var p in source){\n            target[p] = source[p];\n        }\n        return target;\n    }, _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n        var startCache = _assign({}, target._gsap), exclude = \"perspective,force3D,transformOrigin,svgOrigin\", style = target.style, endCache, p, startValue, endValue, startNum, endNum, startUnit, endUnit;\n        if (startCache.svg) {\n            startValue = target.getAttribute(\"transform\");\n            target.setAttribute(\"transform\", \"\");\n            style[_transformProp] = transforms;\n            endCache = _parseTransform(target, 1);\n            _removeProperty(target, _transformProp);\n            target.setAttribute(\"transform\", startValue);\n        } else {\n            startValue = getComputedStyle(target)[_transformProp];\n            style[_transformProp] = transforms;\n            endCache = _parseTransform(target, 1);\n            style[_transformProp] = startValue;\n        }\n        for(p in _transformProps){\n            startValue = startCache[p];\n            endValue = endCache[p];\n            if (startValue !== endValue && exclude.indexOf(p) < 0) {\n                startUnit = getUnit(startValue);\n                endUnit = getUnit(endValue);\n                startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n                endNum = parseFloat(endValue);\n                plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\n                plugin._pt.u = endUnit || 0;\n                plugin._props.push(p);\n            }\n        }\n        _assign(endCache, startCache);\n    };\n    _forEachName(\"padding,margin,Width,Radius\", function(name, index) {\n        var t = \"Top\", r = \"Right\", b = \"Bottom\", l = \"Left\", props = (index < 3 ? [\n            t,\n            r,\n            b,\n            l\n        ] : [\n            t + l,\n            t + r,\n            b + r,\n            b + l\n        ]).map(function(side) {\n            return index < 2 ? name + side : \"border\" + side + name;\n        });\n        _specialProps[index > 1 ? \"border\" + name : name] = function(plugin, target, property, endValue, tween) {\n            var a, vars;\n            if (arguments.length < 4) {\n                a = props.map(function(prop) {\n                    return _get(plugin, prop, property);\n                });\n                vars = a.join(\" \");\n                return vars.split(a[0]).length === 5 ? a[0] : vars;\n            }\n            a = (endValue + \"\").split(\" \");\n            vars = {};\n            props.forEach(function(prop, i) {\n                return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n            });\n            plugin.init(target, vars, tween);\n        };\n    });\n    var CSSPlugin = {\n        name: \"css\",\n        register: _initCore,\n        targetTest: function targetTest(target) {\n            return target.style && target.nodeType;\n        },\n        init: function init(target, vars, tween, index, targets) {\n            var props = this._props, style = target.style, startAt = tween.vars.startAt, startValue, endValue, endNum, startNum, type, specialProp, p, startUnit, endUnit, relative, isTransformRelated, transformPropTween, cache, smooth, hasPriority, inlineProps;\n            _pluginInitted || _initCore();\n            this.styles = this.styles || _getStyleSaver(target);\n            inlineProps = this.styles.props;\n            this.tween = tween;\n            for(p in vars){\n                if (p === \"autoRound\") {\n                    continue;\n                }\n                endValue = vars[p];\n                if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {\n                    continue;\n                }\n                type = typeof endValue;\n                specialProp = _specialProps[p];\n                if (type === \"function\") {\n                    endValue = endValue.call(tween, index, target, targets);\n                    type = typeof endValue;\n                }\n                if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n                    endValue = _replaceRandom(endValue);\n                }\n                if (specialProp) {\n                    specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n                } else if (p.substr(0, 2) === \"--\") {\n                    startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n                    endValue += \"\";\n                    _colorExp.lastIndex = 0;\n                    if (!_colorExp.test(startValue)) {\n                        startUnit = getUnit(startValue);\n                        endUnit = getUnit(endValue);\n                    }\n                    endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n                    this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n                    props.push(p);\n                    inlineProps.push(p, style[p]);\n                } else if (type !== \"undefined\") {\n                    if (startAt && p in startAt) {\n                        startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n                        _isString(startValue) && ~startValue.indexOf(\"random(\") && (startValue = _replaceRandom(startValue));\n                        getUnit(startValue + \"\") || (startValue += _config.units[p] || getUnit(_get(target, p)) || \"\");\n                        (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p));\n                    } else {\n                        startValue = _get(target, p);\n                    }\n                    startNum = parseFloat(startValue);\n                    relative = type === \"string\" && endValue.charAt(1) === \"=\" && endValue.substr(0, 2);\n                    relative && (endValue = endValue.substr(2));\n                    endNum = parseFloat(endValue);\n                    if (p in _propertyAliases) {\n                        if (p === \"autoAlpha\") {\n                            if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n                                startNum = 0;\n                            }\n                            inlineProps.push(\"visibility\", style.visibility);\n                            _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n                        }\n                        if (p !== \"scale\" && p !== \"transform\") {\n                            p = _propertyAliases[p];\n                            ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n                        }\n                    }\n                    isTransformRelated = p in _transformProps;\n                    if (isTransformRelated) {\n                        this.styles.save(p);\n                        if (!transformPropTween) {\n                            cache = target._gsap;\n                            cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);\n                            smooth = vars.smoothOrigin !== false && cache.smooth;\n                            transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);\n                            transformPropTween.dep = 1;\n                        }\n                        if (p === \"scale\") {\n                            this._pt = new PropTween(this._pt, cache, \"scaleY\", cache.scaleY, (relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);\n                            this._pt.u = 0;\n                            props.push(\"scaleY\", p);\n                            p += \"X\";\n                        } else if (p === \"transformOrigin\") {\n                            inlineProps.push(_transformOriginProp, style[_transformOriginProp]);\n                            endValue = _convertKeywordsToPercentages(endValue);\n                            if (cache.svg) {\n                                _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n                            } else {\n                                endUnit = parseFloat(endValue.split(\" \")[2]) || 0;\n                                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n                                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n                            }\n                            continue;\n                        } else if (p === \"svgOrigin\") {\n                            _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n                            continue;\n                        } else if (p in _rotationalProperties) {\n                            _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);\n                            continue;\n                        } else if (p === \"smoothOrigin\") {\n                            _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n                            continue;\n                        } else if (p === \"force3D\") {\n                            cache[p] = endValue;\n                            continue;\n                        } else if (p === \"transform\") {\n                            _addRawTransformPTs(this, endValue, target);\n                            continue;\n                        }\n                    } else if (!(p in style)) {\n                        p = _checkPropPrefix(p) || p;\n                    }\n                    if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n                        startUnit = (startValue + \"\").substr((startNum + \"\").length);\n                        endNum || (endNum = 0);\n                        endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);\n                        startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n                        this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n                        this._pt.u = endUnit || 0;\n                        if (startUnit !== endUnit && endUnit !== \"%\") {\n                            this._pt.b = startValue;\n                            this._pt.r = _renderCSSPropWithBeginning;\n                        }\n                    } else if (!(p in style)) {\n                        if (p in target) {\n                            this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);\n                        } else {\n                            _missingPlugin(p, endValue);\n                            continue;\n                        }\n                    } else {\n                        _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);\n                    }\n                    isTransformRelated || inlineProps.push(p, style[p]);\n                    props.push(p);\n                }\n            }\n            hasPriority && _sortPropTweensByPriority(this);\n        },\n        render: function render(ratio, data) {\n            if (data.tween._time || !_reverting$1()) {\n                var pt = data._pt;\n                while(pt){\n                    pt.r(ratio, pt.d);\n                    pt = pt._next;\n                }\n            } else {\n                data.styles.revert();\n            }\n        },\n        get: _get,\n        aliases: _propertyAliases,\n        getSetter: function getSetter(target, property, plugin) {\n            var p = _propertyAliases[property];\n            p && p.indexOf(\",\") < 0 && (property = p);\n            return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : _getSetter(target, property);\n        },\n        core: {\n            _removeProperty: _removeProperty,\n            _getMatrix: _getMatrix\n        }\n    };\n    gsap.utils.checkPrefix = _checkPropPrefix;\n    gsap.core.getStyleSaver = _getStyleSaver;\n    (function(positionAndScale, rotation, others, aliases) {\n        var all = _forEachName(positionAndScale + \",\" + rotation + \",\" + others, function(name) {\n            _transformProps[name] = 1;\n        });\n        _forEachName(rotation, function(name) {\n            _config.units[name] = \"deg\";\n            _rotationalProperties[name] = 1;\n        });\n        _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n        _forEachName(aliases, function(name) {\n            var split = name.split(\":\");\n            _propertyAliases[split[1]] = all[split[0]];\n        });\n    })(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n    _forEachName(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function(name) {\n        _config.units[name] = \"px\";\n    });\n    gsap.registerPlugin(CSSPlugin);\n    var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap, TweenMaxWithCSS = gsapWithCSS.core.Tween;\n    exports1.Back = Back;\n    exports1.Bounce = Bounce;\n    exports1.CSSPlugin = CSSPlugin;\n    exports1.Circ = Circ;\n    exports1.Cubic = Cubic;\n    exports1.Elastic = Elastic;\n    exports1.Expo = Expo;\n    exports1.Linear = Linear;\n    exports1.Power0 = Power0;\n    exports1.Power1 = Power1;\n    exports1.Power2 = Power2;\n    exports1.Power3 = Power3;\n    exports1.Power4 = Power4;\n    exports1.Quad = Quad;\n    exports1.Quart = Quart;\n    exports1.Quint = Quint;\n    exports1.Sine = Sine;\n    exports1.SteppedEase = SteppedEase;\n    exports1.Strong = Strong;\n    exports1.TimelineLite = Timeline;\n    exports1.TimelineMax = Timeline;\n    exports1.TweenLite = Tween;\n    exports1.TweenMax = TweenMaxWithCSS;\n    exports1.default = gsapWithCSS;\n    exports1.gsap = gsapWithCSS;\n    if (typeof window === \"undefined\" || window !== exports1) {\n        Object.defineProperty(exports1, \"__esModule\", {\n            value: true\n        });\n    } else {\n        delete window.default;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gsap/dist/gsap.js\n");

/***/ }),

/***/ "./styles/globals.css":
/*!****************************!*\
  !*** ./styles/globals.css ***!
  \****************************/
/***/ (() => {



/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/_app.js"));
module.exports = __webpack_exports__;

})();